[
  /*
     ______     __   __   __     __
    /\  ___\   /\ \ / /  /\ \   /\ \
    \ \  __\   \ \ \'/   \ \ \  \ \ \____
     \ \_____\  \ \__|    \ \_\  \ \_____\
      \/_____/   \/_/      \/_/   \/_____/

     ______     ______     _____     ______
    /\  ___\   /\  __ \   /\  __-.  /\  ___\
    \ \ \____  \ \ \/\ \  \ \ \/\ \ \ \  __\
     \ \_____\  \ \_____\  \ \____-  \ \_____\
      \/_____/   \/_____/   \/____/   \/_____/

    */

  {
    "key": "alt+k",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus",
    "args": "<A-k>"
  },
  {
    "key": "alt+j",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus",
    "args": "<A-j>"
  },
  {
    "key": "ctrl+a",
    "command": "nerdtree.openFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "key": "enter",
    "command": "-nerdtree.openFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-nerdtree.unfocusSidebarOrClose",
    "when": "filesExplorerFocus && sideBarVisible"
  },
  {
    "key": "m d",
    "command": "workbench.files.action.createFolderFromExplorer",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "m f",
    "command": "-workbench.files.action.createFolderFromExplorer",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "d d",
    "command": "moveFileToTrash",
    "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "m d",
    "command": "-moveFileToTrash",
    "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "c c",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "m r",
    "command": "-renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "y y",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "m c",
    "command": "-filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "m v",
    "command": "-filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "ctrl+a",
    "command": "list.select",
    "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "enter",
    "command": "-list.select",
    "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "m f",
    "command": "workbench.files.action.createFileFromExplorer",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "m a",
    "command": "-workbench.files.action.createFileFromExplorer",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.files.action.focusFilesExplorer",
    "when": "sideBarVisible && !filesExplorerFocus && !inputFocus && !suggestWidgetVisible && neovim.mode != insert"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.files.action.focusFilesExplorer",
    "when": "!sideBarVisible && !suggestWidgetVisible && neovim.mode != insert && !inputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+j",
    "command": "quickInput.next",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+down",
    "command": "-quickInput.next",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+k",
    "command": "quickInput.previous",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+up",
    "command": "-quickInput.previous",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+a",
    "command": "workbench.action.acceptSelectedQuickOpenItem",
    "when": "inQuickInput && quickInputType == 'quickPick' && !inputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+n",
    "command": "-selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+p",
    "command": "-selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+a",
    "command": "acceptSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "tab",
    "command": "-acceptSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+a",
    "command": "workbench.action.terminal.acceptSelectedSuggestion",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "tab",
    "command": "-workbench.action.terminal.acceptSelectedSuggestion",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+down",
    "command": "-selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+up",
    "command": "-selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.files.action.focusFilesExplorer",
    "when": "sideBarVisible && !filesExplorerFocus && !suggestWidgetVisible && vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.files.action.focusFilesExplorer",
    "when": "!sideBarVisible && !suggestWidgetVisible && vim.mode != 'Insert'"
  },
  {
    "key": "space e",
    "command": "nerdtree.unfocusSidebarOrClose",
    "when": "filesExplorerFocus && sideBarVisible"
  },
  {
    "key": "shift+enter",
    "command": "-workbench.action.terminal.findNext",
    "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
  },
  {
    "key": "shift+enter",
    "command": "-acceptAlternativeSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "shift+enter",
    "command": "-editor.action.extensioneditor.findPrevious",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "key": "shift+enter",
    "command": "-editor.action.webvieweditor.findPrevious",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "shift+enter",
    "command": "-editor.refocusCallHierarchy",
    "when": "callHierarchyVisible"
  },
  {
    "key": "shift+enter",
    "command": "-editor.refocusTypeHierarchy",
    "when": "typeHierarchyVisible"
  },
  {
    "key": "shift+enter",
    "command": "-interactive.execute",
    "when": "config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'"
  },
  {
    "key": "shift+enter",
    "command": "-repl.execute",
    "when": "config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.repl'"
  },
  {
    "key": "shift+enter",
    "command": "-workbench.action.terminal.sendSequence",
    "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'"
  },
  {
    "key": "shift+enter",
    "command": "-editor.action.previousMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "shift+enter",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+`",
    "command": "-workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.focusPanel",
    "when": "panelVisible && editorFocus && neovim.mode != insert && !sideBarFocus"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "panelFocus && panelVisible && !sideBarFocus"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusPanel",
    "when": "panelVisible && editorFocus && neovim.mode != insert"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "panelVisible && panelFocus"
  },
  {
    "key": "ctrl+shift+q",
    "command": "workbench.action.togglePanel",
    "when": "panelFocus"
  },
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.togglePanel",
    "when": "!panelFocus && !sideBarFocus"
  },
  {
    "key": "ctrl+down",
    "command": "-workbench.action.terminal.focus",
    "when": "accessibilityModeEnabled && accessibleViewOnLastLine && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewOnLastLine && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "key": "ctrl+shift+g",
    "command": "-workbench.view.scm",
    "when": "workbench.scm.active"
  },
  {
    "key": "ctrl+shift+l",
    "command": "workbench.action.terminal.openDetectedLink",
    "when": "terminalHasBeenCreated"
  },
  {
    "key": "ctrl+shift+g",
    "command": "-workbench.action.terminal.openDetectedLink",
    "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "key": "ctrl+shift+l",
    "command": "-editor.action.selectHighlights",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+shift+l",
    "command": "-addCursorsAtSearchResults",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+t",
    "command": "-workbench.action.reopenClosedEditor"
  },
  {
    "key": "ctrl+r",
    "command": "-workbench.action.openRecent"
  },
  {
    "key": "ctrl+alt+meta+n",
    "command": "-welcome.showNewFileEntries"
  },
  {
    "key": "ctrl+e",
    "command": "workbench.files.action.focusFilesExplorer"
  },
  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpen"
  },
  {
    "key": "ctrl+e",
    "command": "-editor.action.toggleScreenReaderAccessibilityMode",
    "when": "accessibilityHelpIsShown"
  },
  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+r",
    "command": "-workbench.action.quickOpenNavigateNextInRecentFilesPicker",
    "when": "inQuickOpen && inRecentFilesPicker"
  },
  {
    "key": "ctrl+r",
    "command": "-inlineChat.regenerate",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "key": "ctrl+r",
    "command": "-workbench.action.terminal.runRecentCommand",
    "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "key": "ctrl+r",
    "command": "workbench.action.openRecent",
    "when": "!neovim.init || !editorFocus && !panelFocus && !sideBarFocus"
  },
  {
    "key": "ctrl+w",
    "command": "-workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+q",
    "command": "-workbench.action.quit"
  },
  {
    "key": "ctrl+k ctrl+w",
    "command": "-workbench.action.closeAllEditors"
  },
  {
    "key": "ctrl+k ctrl+shift+w",
    "command": "-workbench.action.closeAllGroups"
  },
  {
    "key": "ctrl+k w",
    "command": "-workbench.action.closeEditorsInGroup"
  },
  {
    "key": "ctrl+k u",
    "command": "-workbench.action.closeUnmodifiedEditors"
  },

  {
    "key": "space x",
    "command": "runCommands",
    "when": "sideBarVisible && neovim.mode != insert && ( workbench.views.extensions.installed.visible || workbench.views.extensions.popular.visible || view.workbench.views.extensions.installed.visible || extensions.recommendedList.visible )",
    "args": {
      "commands": [
        "workbench.action.focusPreviousPart",
        "workbench.action.closeSidebar"
      ]
    }
  },
  {
    "key": "ctrl+shift+m",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "panelVisible && panelFocus"
  },
  {
    "key": "shift+l",
    "command": "workbench.action.nextPanelView",
    "when": "panelVisible && panelFocus"
  },
  {
    "key": "shift+h",
    "command": "workbench.action.previousPanelView",
    "when": "panelVisible && panelFocus"
  },
  {
    "key": "shift+l",
    "command": "workbench.action.nextEditor",
    "when": "editorFocus && neovim.mode != insert && !panelFocus"
  },
  {
    "key": "shift+h",
    "command": "workbench.action.previousEditor",
    "when": "editorFocus && neovim.mode != insert && !panelFocus"
  },
  {
    "key": "ctrl+shift+q",
    "command": "workbench.action.closeActiveEditor",
    "when": "!panelFocus && !sideBarFocus"
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "sideBarVisible && sideBarFocus"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusSideBar",
    "when": "sideBarVisible"
  },
  {
    "key": "ctrl+shift+q",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "sideBarFocus"
  },
  {
    "key": "ctrl+shift+j",
    "command": "search.action.focusNextSearchResult",
    "when": "hasSearchResult && !editorFocus && !inQuickInput && !inQuickOpen && !panelFocus && !suggestWidgetVisible || inSearchEditor && !editorFocus && !inQuickInput && !inQuickOpen && !panelFocus && !suggestWidgetVisible"
  },
  {
    "key": "f4",
    "command": "-search.action.focusNextSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "ctrl+shift+k",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult && !editorFocus && !inQuickInput && !inQuickOpen && !panelFocus && !suggestWidgetVisible || inSearchEditor && !editorFocus && !inQuickInput && !inQuickOpen && !panelFocus && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+a",
    "command": "runCommands",
    "when": "(hasSearchResult || inSearchEditor) && !replaceActive && !isEditableItem && !matchFocus",
    "args": {
      "commands": [
        "workbench.action.focusActiveEditorGroup",
        "workbench.action.closeSidebar"
      ]
    }
  },
  {
    "key": "shift+f4",
    "command": "-search.action.focusPreviousSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "alt+down",
    "command": "-list.focusAnyDown",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "alt+up",
    "command": "-list.focusAnyUp",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+shift+h",
    "command": "-workbench.action.replaceInFiles"
  },
  {
    "key": "ctrl+shift+a",
    "command": "search.action.replaceAll",
    "when": "replaceActive && searchViewletVisible && !findWidgetVisible"
  },
  {
    "key": "ctrl+alt+enter",
    "command": "-search.action.replaceAll",
    "when": "replaceActive && searchViewletVisible && !findWidgetVisible"
  },
  {
    "key": "ctrl+j",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "down",
    "command": "-list.focusDown",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "down",
    "command": "-list.focusUp",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+j",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "ctrl+shift+j",
    "command": "-workbench.action.search.toggleQueryDetails",
    "when": "inSearchEditor || searchViewletFocus"
  },
  {
    "key": "ctrl+shift+k",
    "command": "-editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+j",
    "command": "search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+down",
    "command": "-search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+k",
    "command": "search.focus.previousInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
  },
  {
    "key": "ctrl+up",
    "command": "-search.focus.previousInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
  },
  {
    "key": "ctrl+shift+1",
    "command": "-search.action.replaceAllInFolder",
    "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+1",
    "command": "-search.action.replace",
    "when": "isEditableItem && matchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+1",
    "command": "-search.action.replaceAllInFile",
    "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+a",
    "command": "-editor.action.selectAll"
  },
  {
    "key": "ctrl+a",
    "command": "-list.selectAll",
    "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+a",
    "command": "-notebook.cell.output.selectAll",
    "when": "notebookEditorFocused && notebookOutputFocused"
  },
  {
    "key": "ctrl+a",
    "command": "search.action.replaceAllInFile",
    "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "-search.action.replaceAllInFile",
    "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+a",
    "command": "search.action.replaceAllInFolder",
    "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "-search.action.replaceAllInFolder",
    "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+a",
    "command": "search.action.replace",
    "when": "replaceActive && searchViewletVisible && !findWidgetVisible"
  },
  {
    "key": "ctrl+shift+w",
    "command": "-workbench.action.closeWindow"
  },
  {
    "key": "ctrl+f",
    "command": "-actions.find",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "f3",
    "command": "-editor.action.nextMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "enter",
    "command": "-editor.action.nextMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "ctrl+f3",
    "command": "-editor.action.nextSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "shift+f3",
    "command": "-editor.action.previousMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+shift+f3",
    "command": "-editor.action.previousSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+enter",
    "command": "-editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+backspace",
    "command": "-deleteWordLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+backspace",
    "command": "-vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal.backspace && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "shift+alt+right",
    "command": "-editor.action.smartSelect.expand",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+left",
    "command": "-editor.action.smartSelect.shrink",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+l",
    "command": "editor.action.smartSelect.expand",
    "when": "editorTextFocus && neovim.init && neovim.mode != 'insert'"
  },
  {
    "key": "ctrl+shift+h",
    "command": "editor.action.smartSelect.shrink",
    "when": "editorTextFocus && neovim.init && neovim.mode != 'insert'"
  },
  {
    "key": "shift+alt+right",
    "command": "-editor.action.smartSelect.expand",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+left",
    "command": "-editor.action.smartSelect.shrink",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+o",
    "command": "-workbench.action.files.openFolderViaWorkspace",
    "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
  },
  {
    "key": "ctrl+o",
    "command": "-workbench.action.files.openFileFolder",

    "when": "isMacNative && openFolderWorkspaceSupport"
  },
  {
    "key": "t t",
    "command": "biati.excludedfiles.toggle",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "ctrl+h",
    "command": "-editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "ctrl+h",
    "command": "runCommands",
    "when": "continue.continueGUIView.visible && continue.continueGUIView.active && view.continue.continueGUIView.visible",
    "args": {
      "commands": [
        "workbench.action.focusLastEditorGroup",
        "vscode-neovim.escape"
      ]
    }
  },
  {
    "key": "ctrl+shift+q",
    "command": "runCommands",
    "when": "continue.continueGUIView.visible && continue.continueGUIView.active && view.continue.continueGUIView.visible",
    "args": {
      "commands": ["workbench.action.closeSidebar", "vscode-neovim.escape"]
    }
  },
  {
    "key": "ctrl+shift+a",
    "command": "-editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "-continue.acceptDiff"
  },
  {
    "key": "ctrl+alt+y",
    "command": "-continue.acceptVerticalDiffBlock"
  },
  {
    "key": "ctrl+l",
    "command": "-continue.focusContinueInput"
  },
  {
    "key": "ctrl+shift+l",
    "command": "-continue.focusContinueInputWithoutClear"
  },
  {
    "key": "ctrl+shift+r",
    "command": "-continue.debugTerminal"
  },
  {
    "key": "ctrl+shift+backspace",
    "command": "-continue.rejectDiff"
  },
  {
    "key": "ctrl+alt+n",
    "command": "-continue.rejectVerticalDiffBlock"
  },
  {
    "key": "ctrl+k ctrl+a",
    "command": "-continue.toggleTabAutocompleteEnabled",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+k ctrl+m",
    "command": "-continue.toggleFullScreen",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+shift+[",
    "command": "-editor.fold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+j",
    "command": "-editor.unfoldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+shift+]",
    "command": "-editor.unfold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+=",
    "command": "-editor.unfoldAllExcept",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+9",
    "command": "-editor.unfoldAllMarkerRegions",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+]",
    "command": "-editor.unfoldRecursively",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+0",
    "command": "-editor.foldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+/",
    "command": "-editor.foldAllBlockComments",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+-",
    "command": "-editor.foldAllExcept",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+8",
    "command": "-editor.foldAllMarkerRegions",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+a",
    "command": "editor.action.selectAll",
    "when": "inputFocus && !editorTextFocus"
  }
]
