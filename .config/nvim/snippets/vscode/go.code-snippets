{
  "Package": {
    "scope": "go",
    "prefix": "pa",
    "body": ["// Package $1 provides $2", "package $1"]
  },

  "Switch": {
    "scope": "go",
    "prefix": "sw",
    "body": [
      "switch $1 {",
      "  case $2:",
      "    $0",
      "  default:",
      "    // TODO: implement",
      "}"
    ]
  },

  "Main": {
    "scope": "go",
    "prefix": "main",
    "body": ["package main", "", "func main() {", "  $0", "}"]
  },

  "Close": {
    "scope": "go",
    "prefix": "cl",
    "body": ["close($0)"]
  },

  "Default": {
    "scope": "go",
    "prefix": "def",
    "body": ["default:"]
  },

  "Context Done": {
    "scope": "go",
    "prefix": "cd",
    "body": ["<-ctx.Done()"]
  },

  "Context Error": {
    "scope": "go",
    "prefix": "ce",
    "body": ["ctx.Err()"]
  },

  "Context Argument": {
    "scope": "go",
    "prefix": "con",
    "body": ["ctx context.Context"]
  },

  "Context Background": {
    "scope": "go",
    "prefix": "cb",
    "body": ["context.Background()"]
  },

  "Context WithTimeout": {
    "scope": "go",
    "prefix": "ct",
    "body": ["ctx, cancel := context.WithTimeout(ctx, $0)", "defer cancel()"]
  },

  "Context WithCancel": {
    "scope": "go",
    "prefix": "cc",
    "body": ["ctx, cancel := context.WithCancel(ctx)", "defer cancel()"]
  },

  "NewContext": {
    "scope": "go",
    "prefix": "nc",
    "body": [
      "// ${1:name}Key is a private context key.",
      "type ${1:name}Key struct{}",
      "",
      "// New$3Context returns a new context with ${1:name}.",
      "func New$3Context(ctx context.Context, v *${2:Type}) context.Context {",
      "  return context.WithValue(ctx, ${1:name}Key{}, v)",
      "}",
      "",
      "// $3FromContext returns ${1:name} from context.",
      "func $3FromContext(ctx context.Context) (*${2:Type}, bool) {",
      "  v, ok := ctx.Value(${1:name}Key{}).(*${2:Type})",
      "  return v, ok",
      "}"
    ]
  },

  "Goroutine": {
    "scope": "go",
    "prefix": "go",
    "body": ["go func(){", "  $0", "}()"]
  },

  "Empty Struct": {
    "scope": "go",
    "prefix": "es",
    "body": ["struct{}{}"]
  },

  "Case": {
    "scope": "go",
    "prefix": "ca",
    "body": ["case $1:"]
  },

  "Slice Remove": {
    "scope": "go",
    "prefix": "sr",
    "body": [
      "${1:slice} = append(${1:slice}[:${2:index}], ${1:slice}[${2:index}+1:]...)"
    ]
  },

  "sort": {
    "scope": "go",
    "prefix": "sort",
    "body": [
      "sort.Slice(${1:s}, func(i, j int) bool {",
      "  a := $1[i]",
      "  b := $1[j]",
      "  return $0",
      "})"
    ]
  },

  "int enum": {
    "scope": "go",
    "prefix": "enum-int",
    "body": [
      "// $1 $2.",
      "type $1 int",
      "",
      "// $1s available.",
      "const (",
      "  $1$3 $1 = iota",
      "  $0",
      ")"
    ]
  },

  "string enum": {
    "scope": "go",
    "prefix": "enum-string",
    "body": [
      "// $1 $2.",
      "type $1 string",
      "",
      "// $1s available.",
      "const (",
      "  $0",
      ")"
    ]
  },

  "defer": {
    "scope": "go",
    "prefix": "d",
    "body": ["defer $0"]
  },

  "defer func": {
    "scope": "go",
    "prefix": "de",
    "body": ["defer func() {", "  $0", "}()"]
  },

  "db": {
    "scope": "go",
    "prefix": "db",
    "body": ["db *sqlx.DB"]
  },

  "if": {
    "scope": "go",
    "prefix": "if",
    "body": ["if ${1:v}, ok := $2; ok {", "  $0", "}"]
  },

  "options": {
    "scope": "go",
    "prefix": "options",
    "body": [
      "// Option function.",
      "type Option func(*$1) error",
      "",
      "// New $2 with the given options.",
      "func New(options ...Option) (*$1, error) {",
      "  var v $1",
      "  for _, o := range options {",
      "     if err := o(&v); err != nil {",
      "       return nil, err",
      "     }",
      "  }",
      "  return &v, nil",
      "}"
    ]
  },

  "option": {
    "scope": "go",
    "prefix": "o",
    "body": [
      "// With$1 $0.",
      "func With$1($2) Option {",
      "  return func($3) error {",
      "    $4",
      "    return nil",
      "  }",
      "}"
    ]
  },

  "log error": {
    "scope": "go",
    "prefix": "le",
    "body": ["logs.WithError(err).Error(\"$1\")"]
  },

  "log with fields": {
    "scope": "go",
    "prefix": "lw",
    "body": ["logs.WithFields(log.Fields{", "  $0", "})"]
  },

  "delete": {
    "scope": "go",
    "prefix": "del",
    "body": ["delete($1, \"$2\")"]
  },

  "Pretty Print": {
    "scope": "go",
    "prefix": "pp",
    "body": ["pretty.Print($0)"]
  },

  "fmt.Printf": {
    "scope": "go",
    "prefix": "p",
    "body": ["fmt.Printf(\"${1:%#v}\\n\", $0)"]
  },

  "fmt.Fprintf": {
    "scope": "go",
    "prefix": "pf",
    "body": ["fmt.Fprintf(w, \"${1:%s}\", $0)"]
  },

  "log.Printf": {
    "scope": "go",
    "prefix": "l",
    "body": ["log.Printf(\"${1:%v}\", $0)"]
  },

  "log.Fatalf": {
    "scope": "go",
    "prefix": "fa",
    "body": ["log.Fatalf(\"error$1: %s\", ${0:err})"]
  },

  "Append": {
    "scope": "go",
    "prefix": "a",
    "body": ["$1 = append($1, $0)"]
  },

  "js.Value": {
    "scope": "go",
    "prefix": "j",
    "body": ["js.Value"]
  },

  "js.Func": {
    "scope": "go",
    "prefix": "jf",
    "body": [
      "js.FuncOf(func(this js.Value, args []js.Value) interface{} {",
      "  $0",
      "  return nil",
      "})"
    ]
  },

  "Build Tag": {
    "scope": "go",
    "prefix": "build",
    "body": ["// +build ${0:js}"]
  },

  "To-do": {
    "scope": "go",
    "prefix": "todo",
    "body": ["// TODO: $0"]
  },

  "Float64": {
    "scope": "go",
    "prefix": "fl",
    "body": ["float64($0)"]
  },

  "Method": {
    "scope": "go",
    "prefix": "m",
    "body": [
      "// $3 ${4:implementation}.",
      "func ($1 *$2) $3($5) $6 {",
      "  $0",
      "}"
    ]
  },

  "Method Copy": {
    "scope": "go",
    "prefix": "mm",
    "body": [
      "// $3 ${4:implementation}.",
      "func ($1 $2) $3($5) $6 {",
      "  $0",
      "}"
    ]
  },

  "Make Chan": {
    "scope": "go",
    "prefix": "mc",
    "body": ["make(chan ${0})"]
  },

  "Sprintf": {
    "scope": "go",
    "prefix": "ss",
    "body": ["fmt.Sprintf(\"$1\", $0)"]
  },

  "If Error": {
    "scope": "go",
    "prefix": "e",
    "body": ["if err != nil {", "  $0", "}"]
  },

  "errors.Is()": {
    "scope": "go",
    "scope": "go",
    "prefix": "is",
    "body": ["if errors.Is(err, ${1:io.ErrUnexpectedEOF}) {", "  $0", "}"]
  },

  "errors.As()": {
    "scope": "go",
    "prefix": "as",
    "body": ["var e ${1:*os.PathError}", "if errors.As(err, &e) {", "  $0", "}"]
  },

  "Error Wrap": {
    "scope": "go",
    "prefix": "ew",
    "body": ["fmt.Errorf(\"$1: %w\", err)"]
  },

  "If Error Oneliner": {
    "scope": "go",
    "prefix": "ie",
    "body": ["if err := $1; err != nil {", "  $0", "}"]
  },

  "Return": {
    "scope": "go",
    "prefix": "r",
    "body": ["return "]
  },

  "Return Error": {
    "scope": "go",
    "prefix": "re",
    "body": ["return fmt.Errorf(\"$1: %w\", err)"]
  },

  "Return Nil": {
    "scope": "go",
    "prefix": "n",
    "body": ["return nil"]
  },

  "Time Duration": {
    "scope": "go",
    "prefix": "td",
    "body": ["time.Duration($0)"]
  },

  "Testing TB": {
    "scope": "go",
    "prefix": "tb",
    "body": ["t testing.TB"]
  },

  "Time Now": {
    "scope": "go",
    "prefix": "now",
    "body": ["time.Now()"]
  },

  "Time Start": {
    "scope": "go",
    "prefix": "st",
    "body": ["start := time.Now()"]
  },

  "Time Since": {
    "scope": "go",
    "prefix": "ts",
    "body": ["time.Since(${0:start})"]
  },

  "Assert Equal": {
    "scope": "go",
    "prefix": "ae",
    "body": ["assert.Equal(t, ${1:expected}, ${2:actual})"]
  },

  "Assert Error Equal": {
    "scope": "go",
    "prefix": "aee",
    "body": ["assert.EqualError(t, ${1:err}, `${0:msg}`)"]
  },

  "Assert No Error": {
    "scope": "go",
    "prefix": "no",
    "body": ["assert.NoError(t, err${1:, \"$0\"})"]
  },

  "Map": {
    "scope": "go",
    "prefix": "ma",
    "body": ["map[${1:string}]${0:value}"]
  },

  "HTTP Error": {
    "scope": "go",
    "prefix": "he",
    "body": ["http.Error(w, \"$1\", http.Status$2)"]
  },

  "HTTP Handler": {
    "scope": "go",
    "prefix": "ha",
    "body": ["w http.ResponseWriter, r *http.Request"]
  },

  "Hex Dump": {
    "scope": "go",
    "prefix": "hd",
    "body": ["fmt.Printf(\"%s\\\\n\", hex.Dump($1))"]
  },

  "Tag": {
    "scope": "go",
    "prefix": "tag",
    "body": ["`$1:\"$2\"`"]
  },

  "Bytes": {
    "scope": "go",
    "prefix": "b",
    "body": ["[]byte($1)"]
  },

  "Buffer": {
    "scope": "go",
    "prefix": "buf",
    "body": ["var buf bytes.Buffer"]
  },

  "strings.Builder": {
    "scope": "go",
    "prefix": "sb",
    "body": ["var w strings.Builder"]
  },

  "Init": {
    "scope": "go",
    "prefix": "init",
    "body": ["func init(){", "  $0", "}"]
  },

  "Function": {
    "scope": "go",
    "prefix": "f",
    "body": ["// $1 $2.", "func $1($3) $4 {", "  $0", "}"]
  },

  "Function Anonymous": {
    "scope": "go",
    "prefix": "ff",
    "body": ["func($1) $2 {", "  $0", "}"]
  },

  "Struct": {
    "scope": "go",
    "prefix": "s",
    "body": ["// $1 $2.", "type $1 struct {", "  $0", "}"]
  },

  "Struct Field": {
    "scope": "go",
    "prefix": "sf",
    "body": ["// $1 $3.", "${1:Name} ${2:string}"]
  },

  "Hex Dump Reader": {
    "scope": "go",
    "prefix": "hdr",
    "body": [
      "{",
      "  b, err := ioutil.ReadAll($0)",
      "  if err != nil {",
      "    panic(err)",
      "  }",
      "",
      "  fmt.Printf(\"%s\\\\n\", hex.Dump(b))",
      "}"
    ]
  },

  "Interface": {
    "scope": "go",
    "prefix": "i",
    "body": ["// $1 $2.", "type $1 interface {", "  $0", "}"]
  },

  "Lock & Unlock": {
    "scope": "go",
    "prefix": "lo",
    "body": ["$1.Lock()", "defer $1.Unlock()"]
  },

  "New Constructor": {
    "scope": "go",
    "prefix": "ne",
    "body": [
      "// New $2.",
      "func New($3) *$1 {",
      "  return &$1{",
      "    $0",
      "  }",
      "}"
    ]
  },

  "Inspect As JSON": {
    "scope": "go",
    "prefix": "ij",
    "body": [
      "{",
      "  enc := json.NewEncoder(os.Stderr)",
      "  enc.SetIndent(\"\", \"  \")",
      "  enc.Encode($0)",
      "}"
    ]
  },

  "For Range": {
    "scope": "go",
    "prefix": "fr",
    "body": ["for _, ${1:v} := range ${2:value} {", "  $0", "}"]
  },

  "For Range Chan": {
    "scope": "go",
    "prefix": "frr",
    "body": ["for ${1:v} := range ${2:value} {", "  $0", "}"]
  },

  "Config": {
    "scope": "go",
    "prefix": "config",
    "body": [
      "// Config options.",
      "type Config struct {",
      "  $0",
      "}",
      "",
      "// $1 $2",
      "type $1 struct {",
      "  Config",
      "}",
      "",
      "// New $3 with the given config.",
      "func New(c Config) *$1 {",
      "  return &$1{",
      "    Config: c,",
      "  }",
      "}"
    ]
  },

  "Context-Canceled Channel Send": {
    "scope": "go",
    "prefix": "cs",
    "body": [
      "select {",
      "case $1 <- $0:",
      "case <-ctx.Done():",
      " return ctx.Err()",
      "}"
    ]
  },

  "Non-blocking Channel Send": {
    "scope": "go",
    "prefix": "nb",
    "body": ["select {", "case $1 <- $0:", "default:", "}"]
  },

  "Benchmark Function": {
    "scope": "go",
    "prefix": "bench",
    "body": [
      "// Benchmark $2.",
      "func Benchmark$1(b *testing.B) {",
      "  for i := 0; i < b.N; i++ {",
      "    $0",
      "  }",
      "}"
    ]
  },

  "Test Function": {
    "scope": "go",
    "prefix": "t",
    "body": ["// Test $2.", "func Test$1(t *testing.T) {", "  $0", "}"]
  },

  "Test Case": {
    "scope": "go",
    "prefix": "tr",
    "body": ["t.Run(\"$1\", func(t *testing.T){", "  $0", "})"]
  }
}
