{
  "Arr-keyBy": {
    "prefix": "Arr::keyBy",
    "body": "Arr::keyBy(${1:\\$array}, '${2:key}')",
    "description": "Key an associative array by a field or using a callback (Laravel v9.2)",
    "scope": "php",
  },
  "Arr-join": {
    "prefix": "Arr::join",
    "body": "Arr::join(${1:\\$array}, '${2:glue}')",
    "description": "Join array elements with a string (Laravel v9.11)",
    "scope": "php",
  },
  "Arr-map": {
    "prefix": "Arr::map",
    "body": "Arr::map(${1:\\$array}, ${2:\\$callback})",
    "description": "Arr::map iterates through the array and passes each value and key to the given callback (Laravel v9.13)",
    "scope": "php",
  },
  "Auth-check.sublime-snippet": {
    "prefix": "Auth::check",
    "body": ["Auth::check()"],
    "description": "Determine if the current user is authenticated.",
    "scope": "php",
  },
  "Auth-guest.sublime-snippet": {
    "prefix": "Auth::guest",
    "body": ["Auth::guest()"],
    "description": "Determine if the current user is a guest.",
    "scope": "php",
  },
  "Auth-logout.sublime-snippet": {
    "prefix": "Auth::logout",
    "body": ["Auth::logout();"],
    "description": "Log the user out of the application.",
    "scope": "php",
  },
  "Auth-user.sublime-snippet": {
    "prefix": "Auth::user",
    "body": ["Auth::user()"],
    "description": "Get the currently authenticated user.",
    "scope": "php",
  },
  "Auth-guard": {
    "prefix": "Auth::guard",
    "body": ["Auth::guard('${1:guardName}')$2"],
    "description": "customize the \"guard\" that is used to authenticate and register users",
    "scope": "php",
  },
  "Auth-attempt": {
    "prefix": "Auth::attempt",
    "body": [
      "Auth::attempt([${1:'email' => \\$email, 'password' => \\$password}])$2",
    ],
    "description": "Log by passing an array with key-value",
    "scope": "php",
  },
  "Auth-login": {
    "prefix": "Auth::login",
    "body": ["Auth::login(${1:\\$user});$2"],
    "description": "Log an existing user instance into your application",
    "scope": "php",
  },
  "Auth-loginUsingId": {
    "prefix": "Auth::loginUsingId",
    "body": ["Auth::loginUsingId($1);$2"],
    "description": "To log a user into the application by their ID",
    "scope": "php",
  },
  "Auth-viaRemember": {
    "prefix": "Auth::viaRemember",
    "body": ["Auth::viaRemember()"],
    "description": "Determine if the user was authenticated using the \"remember me\" cookie.",
    "scope": "php",
  },
  "Auth-routes": {
    "prefix": "Auth::routes",
    "body": ["Auth::routes();"],
    "description": "Set authentication routes (v5.3)",
    "scope": "php",
  },
  "Blade-component": {
    "prefix": "Blade::component",
    "body": "Blade::component('${1:package-name}', ${2:PackageNameComponent}::class);",
    "description": "Registering Package Components (AppServiceProvider boot method)",
    "scope": "php",
  },
  "Blade-include": {
    "prefix": "Blade::include",
    "body": "Blade::include('${1:includes.input}', '${2:input}');",
    "description": "Aliasing Includes (AppServiceProvider boot method)",
    "scope": "php",
  },
  "Blade-if": {
    "prefix": "Blade::if",
    "body": [
      "Blade::if('${1:env}', function ($${2:environment}) {",
      "    ${3:return app()->environment($$environment);}",
      "});",
    ],
    "description": "Custom If Statements (AppServiceProvider boot method)",
    "scope": "php",
  },
  "Blade-directive": {
    "prefix": "Blade::directive",
    "body": [
      "Blade::directive('${1:datetime}', function ($${2:expression}) {",
      "    ${3:return \"<?php echo ($$expression)->format('m/d/Y H:i'); ?>\";}",
      "});",
    ],
    "description": "Custom directive (AppServiceProvider boot method)",
    "scope": "php",
  },
  "Blade-stringable": {
    "prefix": "Blade::stringable",
    "body": [
      "Blade::stringable(function (${1:Money} $${2:money}) {",
      "    ${3:return $$money->formatTo('en_GB');}",
      "});",
    ],
    "description": "Custom echo handlers (AppServiceProvider boot method)",
    "scope": "php",
  },
  "Blade-render": {
    "prefix": "Blade::render",
    "body": "Blade::render(${1:'Blade template string'}, ${2:\\$data});",
    "description": "Transform a raw Blade template string into valid HTML (Laravel 9.x)",
    "scope": "php",
  },
  "Blade-renderComponent": {
    "prefix": "Blade::renderComponent",
    "body": "Blade::renderComponent(new ${1:HelloComponent}(${2:\\$params}));",
    "description": "Render a given class component by passing the component instance to the method  (Laravel 9.x)",
    "scope": "php",
  },
  "Broadcast-channel": {
    "prefix": "Broadcast::channel",
    "body": "Broadcast::channel('${1}', ${2}::class);${3}",
    "description": "Broadcast Channel Classes",
    "scope": "php",
  },
  "Cache-add.sublime-snippet": {
    "prefix": "Cache::add",
    "body": ["Cache::add('${1:key}', ${2:\\$value}, ${3:\\$ttl});$4"],
    "description": "Store an item in the Cache if it doesn't exist.",
    "scope": "php",
  },
  "Cache-decrement.sublime-snippet": {
    "prefix": "Cache::decrement",
    "body": ["Cache::decrement('${1:key}', ${2:\\$amount});$3"],
    "description": "Decrement a Cached value",
    "scope": "php",
  },
  "Cache-flush.sublime-snippet": {
    "prefix": "Cache::flush",
    "body": ["Cache::flush();"],
    "description": "Remove all items from the cache.",
    "scope": "php",
  },
  "Cache-forever.sublime-snippet": {
    "prefix": "Cache::forever",
    "body": ["Cache::forever('${1:key}', ${2:\\$value});$3"],
    "description": "Store an item in the Cache Permanently",
    "scope": "php",
  },
  "Cache-forget.sublime-snippet": {
    "prefix": "Cache::forget",
    "body": ["Cache::forget('${1:key}');$2"],
    "description": "Remove an Item from the Cache",
    "scope": "php",
  },
  "Cache-get.sublime-snippet": {
    "prefix": "Cache::get",
    "body": ["Cache::get('${1:key}', '${2:default}');$3"],
    "description": "Retrieve an Item from the Cache",
    "scope": "php",
  },
  "Cache-has.sublime-snippet": {
    "prefix": "Cache::has",
    "body": ["Cache::has('${1:key}')$2"],
    "description": "Check for existence in Cache",
    "scope": "php",
  },
  "Cache-increment.sublime-snippet": {
    "prefix": "Cache::increment",
    "body": ["Cache::increment('${1:key}', ${2:\\$amount});$3"],
    "description": "Increment a Cached value",
    "scope": "php",
  },
  "Cache-pull.sublime-snippet": {
    "prefix": "Cache::pull",
    "body": ["Cache::pull('${1:key}');$2"],
    "description": "Pulling An Item From The Cache",
    "scope": "php",
  },
  "Cache-put.sublime-snippet": {
    "prefix": "Cache::put",
    "body": ["Cache::put('${1:key}', ${2:\\$value}, ${3:\\$ttl});$4"],
    "description": "Store an item in the Cache (key, value, ttl)",
    "scope": "php",
  },
  "Cache-remember.sublime-snippet": {
    "prefix": "Cache::remember",
    "body": [
      "Cache::remember('${1:key}', ${2:\\$ttl}, function () {",
      "    $3",
      "});",
    ],
    "description": "Retrieve item or Store a default value if it doesn't exist",
    "scope": "php",
  },
  "Cache-rememberForever.sublime-snippet": {
    "prefix": "Cache::rememberForever",
    "body": [
      "Cache::rememberForever('${1:key}', function () {",
      "    $2",
      "});",
    ],
    "description": "Retrieve item or Store a default value permanently",
    "scope": "php",
  },
  "Cache-lock-get": {
    "prefix": "Cache::lock-get",
    "body": "Cache::lock('${1:lock-name}', ${2:60})->get()",
    "description": "obtaining arbitrary locks",
    "scope": "php",
  },
  "Cache-lock-release": {
    "prefix": "Cache::lock-release",
    "body": "Cache::lock('${1:lock-name}')->release()",
    "description": "release locks",
    "scope": "php",
  },
  "Cache-lock-block": {
    "prefix": "Cache::lock-block",
    "body": "Cache::lock('${1:lock-name}', ${2:60})->block(${3:10})",
    "description": "block until the lock becomes available",
    "scope": "php",
  },
  "Form-checkbox": {
    "prefix": "Form::checkbox",
    "body": [
      "{!! Form::checkbox(${1:$$name}, ${2:$$value}, ${3:$$checked}, [${4:$$options}]) !!}",
    ],
    "description": "Create a checkbox input field.",
    "scope": "php",
  },
  "Form-close": {
    "prefix": "Form::close",
    "body": ["{!! Form::close(${1}) !!}"],
    "description": "Closes a form tag",
    "scope": "php",
  },
  "Form-date": {
    "prefix": "Form::date",
    "body": ["{!! Form::date(${1:$$name}, ${2:$$value}, [${3:$$options}]) !!}"],
    "description": "Create a date input field",
    "scope": "php",
  },
  "Form-datetime": {
    "prefix": "Form::datetime",
    "body": [
      "{!! Form::datetime(${1:$$name}, ${2:$$value}, [${3:$$options}]) !!}",
    ],
    "description": "Create a datetime input field",
    "scope": "php",
  },
  "Form-datetimeLocal": {
    "prefix": "Form::datetimeLocal",
    "body": [
      "{!! Form::datetimeLocal(${1:$$name}, ${2:$$value}, [${3:$$options}]) !!}",
    ],
    "description": "Create a datetime-local input field",
    "scope": "php",
  },
  "Form-email": {
    "prefix": "Form::email",
    "body": [
      "{!! Form::email(${1:$$name}, ${2:$$value}, [${3:$$options}]) !!}",
    ],
    "description": "Create an e-mail input field",
    "scope": "php",
  },
  "Form-file": {
    "prefix": "Form::file",
    "body": ["{!! Form::file(${1:$$name}, [${2:$$options}]) !!}"],
    "description": "Create a file input field",
    "scope": "php",
  },
  "Form-hidden": {
    "prefix": "Form::hidden",
    "body": [
      "{!! Form::hidden(${1:$$name}, ${2:$$value}, [${3:$$options}]) !!}",
    ],
    "description": "Create a hidden input field",
    "scope": "php",
  },
  "Form-label": {
    "prefix": "Form::label",
    "body": ["{!! Form::label(${1:$$for}, ${2:$$text}, [${3:$$options}]) !!}"],
    "description": "Create a form label element.",
    "scope": "php",
  },
  "Form-model": {
    "prefix": "Form::model",
    "body": ["{!! Form::model(${1:$$user}, [${2:$$options}]) !!}"],
    "description": "Create a new model based form builder.",
    "scope": "php",
  },
  "Form-number": {
    "prefix": "Form::number",
    "body": [
      "{!! Form::number(${1:$$name}, ${2:$$value}, [${3:$$options}]) !!}",
    ],
    "description": "Create a number input field",
    "scope": "php",
  },
  "Form-open": {
    "prefix": "Form::open",
    "body": ["{!! Form::open(${1}) !!}"],
    "description": "Open up a new HTML form",
    "scope": "php",
  },
  "Form-password": {
    "prefix": "Form::password",
    "body": ["{!! Form::password(${1:$$name}, [${2:$$options}]) !!}"],
    "description": "Create a password input field",
    "scope": "php",
  },
  "Form-radio": {
    "prefix": "Form::radio",
    "body": [
      "{!! Form::radio(${1:$$name}, ${2:$$value}, ${3:$$checked}, [${4:$$options}]) !!}",
    ],
    "description": "Create a radio button input field",
    "scope": "php",
  },
  "Form-select": {
    "prefix": "Form::select",
    "body": [
      "{!! Form::select(${1:$$name}, ${2:$$list}, ${3:$$selected}, [${4:$$options}]) !!}",
    ],
    "description": "Create a select box field",
    "scope": "php",
  },
  "Form-selectMonth": {
    "prefix": "Form::selectMonth",
    "body": [
      "{!! Form::selectMonth(${1:$$name}, ${2:$$selected}, [${3:$$options}]) !!}",
    ],
    "description": "Create a select month field",
    "scope": "php",
  },
  "Form-selectRange": {
    "prefix": "Form::selectRange",
    "body": [
      "{!! Form::selectRange(${1:$$name}, ${2:$$min}, ${3:$$max}), ${4:$$selected}, [${5:$$options} !!}",
    ],
    "description": "Create a select range field",
    "scope": "php",
  },
  "Form-submit": {
    "prefix": "Form::submit",
    "body": ["{!! Form::submit(${1:$$text}, [${2:$$options}]) !!}"],
    "description": "Create a submit button element",
    "scope": "php",
  },
  "Form-text": {
    "prefix": "Form::text",
    "body": ["{!! Form::text(${1:$$name}, ${2:$$value}, [${3:$$options}]) !!}"],
    "description": "Create a text input field",
    "scope": "php",
  },
  "Form-textarea": {
    "prefix": "Form::textarea",
    "body": [
      "{!! Form::textarea(${1:$$name}, ${2:$$value}, [${3:$$options}]) !!}",
    ],
    "description": "Create a textarea input field",
    "scope": "php",
  },
  "Form-time": {
    "prefix": "Form::time",
    "body": ["{!! Form::time(${1:$$name}, ${2:$$value}, [${3:$$options}]) !!}"],
    "description": "Create a time input field",
    "scope": "php",
  },
  "Form-token": {
    "prefix": "Form::token",
    "body": ["{!! Form::token(${1}) !!}"],
    "description": "Generate a hidden field with the current CSRF token",
    "scope": "php",
  },
  "Form-url": {
    "prefix": "Form::url",
    "body": ["{!! Form::url(${1:$$name}, ${2:$$value}, [${3:$$options}]) !!}"],
    "description": "Create a url input field",
    "scope": "php",
  },
  "link_to": {
    "prefix": "link_to",
    "body": [
      "{!! link_to(${1:$url}, ${2:$title = null}, ${3:$attributes = []}, ${4:$secure = null}, ${5:$escape = true}) !!}",
    ],
    "description": "Generate an HTML link",
    "scope": "php",
  },
  "link_to_asset": {
    "prefix": "link_to_asset",
    "body": [
      "{!! link_to_asset(${1:$url}, ${2:$title = null}, ${3:$attributes = []}, ${4:$secure = null}) !!}",
    ],
    "description": "Generate an HTML link to an asset",
    "scope": "php",
  },
  "link_to_route": {
    "prefix": "link_to_route",
    "body": [
      "{!! link_to_route(${1:$name}, ${2:$title = null}, ${3:$parameters = []}, ${4:$attributes = []}) !!}",
    ],
    "description": "Generate an HTML link to a named route",
    "scope": "php",
  },
  "link_to_action": {
    "prefix": "link_to_action",
    "body": [
      "{!! link_to_action(${1:$action}, ${2:$title = null}, ${3:$parameters = []}, ${4:$attributes = []}) !!}",
    ],
    "description": "Generate an HTML link to a controller action",
    "scope": "php",
  },
  "Config-all.sublime-snippet": {
    "prefix": "Config::all",
    "body": ["Config::all();"],
    "description": "Get all of the configuration items for the application.",
    "scope": "php",
  },
  "Config-get.sublime-snippet": {
    "prefix": "Config::get",
    "body": ["Config::get('${1:key}', '${2:default}');$3"],
    "description": "Get the specified configuration value.",
    "scope": "php",
  },
  "Config-has.sublime-snippet": {
    "prefix": "Config::has",
    "body": ["Config::has('${1:key}')$2"],
    "description": "Determine if the given configuration value exists.",
    "scope": "php",
  },
  "Config-set.sublime-snippet": {
    "prefix": "Config::set",
    "body": ["Config::set('${1:key}', ${2:\\$value});$3"],
    "description": "Set a given configuration value.",
    "scope": "php",
  },
  "Config-setMany.sublime-snippet": {
    "prefix": "Config::setMany",
    "body": ["Config::set([", "    '${1:key}' => ${2:\\$value},$3", "]);$4"],
    "description": "Set a given configuration value.",
    "scope": "php",
  },
  "Command-anticipate.sublime-snippet": {
    "prefix": "Console::anticipate",
    "body": ["\\$this->anticipate('${1:Message}');$2"],
    "description": "Give the user options for repsonse",
    "scope": "php",
  },
  "Command-ask.sublime-snippet": {
    "prefix": "Console::ask",
    "body": ["\\$this->ask('${1:Question}');$2"],
    "description": "Prompts the user with a question in the console",
    "scope": "php",
  },
  "Command-choice.sublime-snippet": {
    "prefix": "Console::choice",
    "body": [
      "\\$this->choice('${1:Question?}', [${2'Choice1', 'Choice2'}], ${3:\\$default});$4",
    ],
    "description": "Give the user a predefined set of choices",
    "scope": "php",
  },
  "Command-comment.sublime-snippet": {
    "prefix": "Console::comment",
    "body": ["\\$this->comment('${1:Message}');$2"],
    "description": "Log a comment to the console",
    "scope": "php",
  },
  "Command-confirm.sublime-snippet": {
    "prefix": "",
    "body": ["\\$this->confirm('${1:Do you wish to continue? [Y|N]}');$2"],
    "description": "Logs a confirmation prompt to the console",
    "scope": "php",
  },
  "Command-error.sublime-snippet": {
    "prefix": "Console::error",
    "body": ["\\$this->error('${1:Message}');$2"],
    "description": "Log error to the console in red",
    "scope": "php",
  },
  "Command-info.sublime-snippet": {
    "prefix": "Console::info",
    "body": ["\\$this->info('${1:Message}');$2"],
    "description": "Log information to the console in green",
    "scope": "php",
  },
  "Command-line.sublime-snippet": {
    "prefix": "Console::line",
    "body": ["\\$this->line('${1:Display this on the screen}');$2"],
    "description": "Log plain information to the console",
    "scope": "php",
  },
  "Command-option.sublime-snippet": {
    "prefix": "Console::option",
    "body": ["\\$this->option('$1');$2"],
    "description": "Get an option from constructor",
    "scope": "php",
  },
  "Command-question.sublime-snippet": {
    "prefix": "Console::question",
    "body": ["\\$this->question('${1:Message}');$2"],
    "description": "Logs a question to the console",
    "scope": "php",
  },
  "Command-secret.sublime-snippet": {
    "prefix": "Console::secret",
    "body": ["\\$this->secret('${1:What is the password?}');$2"],
    "description": "Prompt the user for hidden input",
    "scope": "php",
  },
  "Command-table.sublime-snippet": {
    "prefix": "Console::table",
    "body": ["\\$this->table('${1:\\$header}, ${2:\\$row}');$3"],
    "description": "Prints a nicely formatted table to the console",
    "scope": "php",
  },
  "Command-warn.sublime-snippet": {
    "prefix": "Console::warn",
    "body": ["\\$this->warn('${1:Message}');$2"],
    "description": "Logs a warn message to the console",
    "scope": "php",
  },
  "Cookie-forever.sublime-snippet": {
    "prefix": "Cookie::forever",
    "body": [
      "\\$response->withCookie(cookie()->forever('${1:key}', ${2:\\$value}));$3",
    ],
    "description": "Make a Permanent Cookie",
    "scope": "php",
  },
  "Cookie-get.sublime-snippet": {
    "prefix": "Cookie::get",
    "body": ["\\$request->cookie('${1:key}');$2"],
    "description": "Retrieve a Cookie value",
    "scope": "php",
  },
  "Cookie-set.sublime-snippet": {
    "prefix": "Cookie::set",
    "body": ["\\$response->withCookie(cookie('${1:key}', ${2:\\$value}));$3"],
    "description": "Attach a Cookie to a Response.",
    "scope": "php",
  },
  "Crypt-decrypt.sublime-snippet": {
    "prefix": "Crypt::decrypt",
    "body": [
      "try {",
      "    ${1:\\$decrypted} = Crypt::decrypt(${2:\\$encryptedValue});",
      "} catch (Illuminate\\Contracts\\Encryption\\DecryptException $e) {",
      "    $3",
      "}$4",
    ],
    "description": "Decrypt a value",
    "scope": "php",
  },
  "Crypt-encrypt.sublime-snippet": {
    "prefix": "Crypt::encrypt",
    "body": ["Crypt::encrypt(${1:\\$value});$2"],
    "description": "Encrypt a value",
    "scope": "php",
  },
  "DB-delete.sublime-snippet": {
    "prefix": "DB::delete",
    "body": ["DB::delete(${1:'delete users where name = ?'}${2:, ['John']})$3"],
    "description": "Run an delete statement against the database.",
    "scope": "php",
  },
  "DB-insert.sublime-snippet": {
    "prefix": "DB::insert",
    "body": [
      "DB::insert(${1:'insert into users (id, name) values (?, ?)'}${2:, [1, 'Dayle']})$3",
    ],
    "description": "Run an insert statement against the database.",
    "scope": "php",
  },
  "DB-select.sublime-snippet": {
    "prefix": "DB::select",
    "body": [
      "DB::select(${1:'select * from users where active = ?'}${2:, [1]})$3",
    ],
    "description": "Run a select statement against the database.",
    "scope": "php",
  },
  "DB-statement.sublime-snippet": {
    "prefix": "DB::select",
    "body": ["DB::statement(${1:'drop table users'})$2"],
    "description": "Execute an SQL statement and return the boolean result.",
    "scope": "php",
  },
  "DB-transaction-begin.sublime-snippet": {
    "prefix": "DB::transaction_begin",
    "body": ["DB::beginTransaction();"],
    "description": "Start a new database transaction.",
    "scope": "php",
  },
  "DB-transaction-commit.sublime-snippet": {
    "prefix": "DB::transaction_commit",
    "body": ["DB::commit();"],
    "description": "Commit the active database transaction.",
    "scope": "php",
  },
  "DB-transaction-rollback.sublime-snippet": {
    "prefix": "DB::transaction_rollback",
    "body": ["DB::rollback();"],
    "description": "Rollback the active database transaction.",
    "scope": "php",
  },
  "DB-transaction.sublime-snippet": {
    "prefix": "DB::transaction",
    "body": ["DB::transaction(function () {", "    $1", "});$2"],
    "description": "Execute a Closure within a transaction.",
    "scope": "php",
  },
  "DB-update.sublime-snippet": {
    "prefix": "DB::update",
    "body": [
      "DB::update(${1:'update users set votes = 100 where name = ?'}${2:, ['John']});$3",
    ],
    "description": "Run an update statement against the database.",
    "scope": "php",
  },
  "DB-table": {
    "prefix": "DB::table",
    "body": ["DB::table('${1:users}')$2"],
    "description": "Retrieving rows from a table",
    "scope": "php",
  },
  "eloquent-getter": {
    "prefix": "Eloquent-getter",
    "body": [
      "public function get${1:Name}Attribute(\\$value) {",
      "    return ${2:strtoupper(\\$value)};",
      "}",
    ],
    "description": "Eloquent getter (Laravel 5.1+)",
    "scope": "php",
  },
  "eloquent-setter": {
    "prefix": "Eloquent-setter",
    "body": [
      "public function set${1:Name}Attribute(\\$value) {",
      "    \\$this->attributes['${2:column}'] = ${3:\\$value};",
      "}",
    ],
    "description": "Eloquent setter (Laravel 5.1+)",
    "scope": "php",
  },
  "eloquent-attribute": {
    "prefix": "Eloquent-attribute",
    "body": [
      "public function ${1:name}(): Attribute",
      "{",
      "    return new Attribute(",
      "        get: fn (\\$value) => ${2:strtoupper(\\$value)},",
      "        set: fn (\\$value) => ${3:\\$value},",
      "    );",
      "}",
    ],
    "description": "Eloquent accessors / mutators (Laravel 9.x)",
    "scope": "php",
  },
  "eloquent-attribute-make": {
    "prefix": "Eloquent-attribute-make",
    "body": [
      "public function ${1:name}(): Attribute",
      "{",
      "    return Attribute::make(",
      "        get: fn (\\$value) => ${2:\\$value},",
      "        set: fn (\\$value) => ${3:\\$value},",
      "    );",
      "}",
    ],
    "description": "Eloquent accessors / mutators (Laravel 9.x)",
    "scope": "php",
  },
  "Event-createClassListener.sublime-snippet": {
    "prefix": "Event::createClassListener",
    "body": ["Event::createClassListener(${1:listener});$2"],
    "description": "Create a class based listener using the IoC container.",
    "scope": "php",
  },
  "Event-fire.sublime-snippet": {
    "prefix": "Event::fire",
    "body": ["Event::fire(${1:new MyCustomEvent()});$2"],
    "description": "Fire an event and call the listeners.",
    "scope": "php",
  },
  "Event-firing.sublime-snippet": {
    "prefix": "Event::firing",
    "body": ["Event::firing();"],
    "description": "Get the event that is currently firing.",
    "scope": "php",
  },
  "Event-flush.sublime-snippet": {
    "prefix": "Event::flush",
    "body": ["Event::flush('${1:event}');$2"],
    "description": "Flush a set of pushed events.",
    "scope": "php",
  },
  "Event-forget.sublime-snippet": {
    "prefix": "Event::forget",
    "body": ["Event::forget('${1:event}');$2"],
    "description": "Remove a set of listeners from the dispatcher.",
    "scope": "php",
  },
  "Event-getListeners.sublime-snippet": {
    "prefix": "Event::getListeners",
    "body": ["Event::getListeners('${1:eventName}');$2"],
    "description": "Get all of the listeners for a given event name.",
    "scope": "php",
  },
  "Event-hasListeners.sublime-snippet": {
    "prefix": "Event::hasListeners",
    "body": ["Event::hasListeners('${1:eventName}');$2"],
    "description": "Determine if a given event has listeners.",
    "scope": "php",
  },
  "Event-listen.sublime-snippet": {
    "prefix": "Event::listen",
    "body": ["Event::listen(${1:events}, ${2:listener}, ${3:priority});$4"],
    "description": "Register an event listener with the dispatcher.",
    "scope": "php",
  },
  "Event-makeListener.sublime-snippet": {
    "prefix": "Event::makeListener",
    "body": ["Event::makeListener(${1:listener});$2"],
    "description": "Register an event listener with the dispatcher.",
    "scope": "php",
  },
  "Event-push.sublime-snippet": {
    "prefix": "Event::push",
    "body": ["Event::push(${1:event}, ${2:payload});$3"],
    "description": "Register an event and payload to be fired later.",
    "scope": "php",
  },
  "Event-subscribe.sublime-snippet": {
    "prefix": "Event::subscribe",
    "body": ["Event::subscribe(${1:subscriber});$2"],
    "description": "Register an event subscriber with the dispatcher.",
    "scope": "php",
  },
  "Event-until.sublime-snippet": {
    "prefix": "Event::until",
    "body": ["Event::until(${1:event}, ${2:payload});$3"],
    "description": "Fire an event until the first non-null response is returned.",
    "scope": "php",
  },
  "Hash-check.sublime-snippet": {
    "prefix": "Hash::check",
    "body": ["Hash::check(${1:\\$value}, ${2:\\$hashedValue})$3"],
    "description": "Check the given plain value against a hash.",
    "scope": "php",
  },
  "Hash-make.sublime-snippet": {
    "prefix": "Hash::make",
    "body": ["Hash::make(${1:\\$value})$2"],
    "description": "Hash the given value.",
    "scope": "php",
  },
  "Hash-needsRehash.sublime-snippet": {
    "prefix": "Hash::needsRehash",
    "body": [
      "if (Hash::needsRehash(${1:\\$hashedValue}))",
      "{",
      "    ${2:\\$hashed} = Hash::make(${3:\\$value});",
      "}$4",
    ],
    "description": "Check if the given hash has been hashed using the given options.",
    "scope": "php",
  },
  "Helper-array-add.sublime-snippet": {
    "prefix": "Helper::array_add",
    "body": ["array_add(${1:\\$array}, ${2:'key'}, ${3:'value'})"],
    "description": "Add an element to an array using \"dot\" notation if it doesn't exist.",
    "scope": "php",
  },
  "Helper-array-collapse.sublime-snippet": {
    "prefix": "Helper::array_collapse",
    "body": ["array_collapse(${1:\\$array})"],
    "description": "Collapse an array of arrays into a single array.",
    "scope": "php",
  },
  "Helper-array-data_get.sublime-snippet": {
    "prefix": "Helper::array-data_get",
    "body": ["data_get(${1:\\$array}, ${2:'names.john'}, ${3:'default'})"],
    "description": "Get an item from an array using \"dot\" notation.",
    "scope": "php",
  },
  "Helper-array-divide.sublime-snippet": {
    "prefix": "Helper::array_divide",
    "body": [
      "list(${1:\\$keys}, ${2:\\$values}) = array_divide(${3:\\$array});",
    ],
    "description": "Divide an array into two arrays. One with keys and the other with values.",
    "scope": "php",
  },
  "Helper-array-dot.sublime-snippet": {
    "prefix": "Helper::array_dot",
    "body": ["array_dot(${1:\\$array})"],
    "description": "Flatten a multi-dimensional associative array with dots.",
    "scope": "php",
  },
  "Helper-array-end.sublime-snippet": {
    "prefix": "Helper::array_last",
    "body": ["last(${1:\\$array})"],
    "description": "Get the last element of an array. Useful for method chaining.",
    "scope": "php",
  },
  "Helper-array-except.sublime-snippet": {
    "prefix": "Helper::array_except",
    "body": ["array_except(${1:\\$array}, ${2:['key', 'otherKey']})"],
    "description": "Get all of the given array except for a specified array of items.",
    "scope": "php",
  },
  "Helper-array-first.sublime-snippet": {
    "prefix": "Helper::array_first",
    "body": [
      "array_first(${1:\\$array}, function (${2:\\$key}, ${3:\\$value}) {",
      "    return ${4:\\$value >= 150;}",
      "});",
    ],
    "description": "Return the first element in an array passing a given truth test.",
    "scope": "php",
  },
  "Helper-array-flatten.sublime-snippet": {
    "prefix": "Helper::array_flatten",
    "body": ["array_flatten(${1:\\$array})"],
    "description": "Will flatten a multi-dimensional array into a single level.",
    "scope": "php",
  },
  "Helper-array-forget.sublime-snippet": {
    "prefix": "Helper::array_forget",
    "body": ["array_forget(${1:\\$array}, ${2:'names.joe'})"],
    "description": "Remove one or many array items from a given array using \"dot\" notation.",
    "scope": "php",
  },
  "Helper-array-get.sublime-snippet": {
    "prefix": "Helper::array_get",
    "body": ["array_get(${1:\\$array}, ${2:'names.john'}, ${3:'default'})"],
    "description": "Get an item from an array using \"dot\" notation.",
    "scope": "php",
  },
  "Helper-array-has.sublime-snippet": {
    "prefix": "Helper::array_has",
    "body": ["array_has(${1:\\$array}, ${2:key})$3"],
    "description": "Check if an item exists in an array using \"dot\" notation.",
    "scope": "php",
  },
  "Helper-array-head.sublime-snippet": {
    "prefix": "Helper::array-head",
    "body": ["head(${1:\\$array})"],
    "description": "Get the first element of an array. Useful for method chaining.",
    "scope": "php",
  },
  "Helper-array-last.sublime-snippet": {
    "prefix": "Helper::array_last",
    "body": [
      "array_last(${1:\\$array}, function (${2:\\$key}, ${3:\\$value}) {",
      "    return ${4:\\$value >= 150;}",
      "});",
    ],
    "description": "Return the last element in an array passing a given truth test.",
    "scope": "php",
  },
  "Helper-array-only.sublime-snippet": {
    "prefix": "Helper::array_only",
    "body": ["array_only(${1:\\$array}, ${2:['key', 'otherKey']})"],
    "description": "Get a subset of the items from the given array.",
    "scope": "php",
  },
  "Helper-array-pluck.sublime-snippet": {
    "prefix": "Helper::array_pluck",
    "body": ["array_pluck(${1:\\$array}, ${2:'value'})"],
    "description": "Pluck an array of values from an array.",
    "scope": "php",
  },
  "Helper-array-prepend.sublime-snippet": {
    "prefix": "Helper::array_prepend",
    "body": ["array_prepend(${1:\\$array}, ${2:'value'})"],
    "description": "Push an item onto the beginning of an array.",
    "scope": "php",
  },
  "Helper-array-pull.sublime-snippet": {
    "prefix": "Helper::array_pull",
    "body": ["array_pull(${1:\\$array}, ${2:'value'})"],
    "description": "Get a value from the array, and remove it.",
    "scope": "php",
  },
  "Helper-array-set.sublime-snippet": {
    "prefix": "Helper::array_set",
    "body": ["array_set(${1:\\$array}, ${2:'products.desk.price'}, ${3:200})"],
    "description": "Set an array item to a given value using \"dot\" notation.",
    "scope": "php",
  },
  "Helper-array-sort-recursive.sublime-snippet": {
    "prefix": "Helper::array_sort_recursive",
    "body": ["array_sort_recursive(${1:\\$array});"],
    "description": "Recursively sort an array by keys and values.",
    "scope": "php",
  },
  "Helper-array-sort.sublime-snippet": {
    "prefix": "Helper::array_sort",
    "body": [
      "array_values(array_sort(${1:\\$array}, function (${2:\\$key}, ${3:\\$value}) {",
      "    return ${3:\\$value}['${4:name}'];",
      "}));",
    ],
    "description": "Sort the array using the given callback.",
    "scope": "php",
  },
  "Helper-array-where.sublime-snippet": {
    "prefix": "Helper::array_where",
    "body": [
      "array_where(${2:\\$array}, function (${3:\\$key}, ${4:\\$value}) {",
      "    return ${4:is_string(\\$value);}",
      "});",
    ],
    "description": "Filter the array using the given callback.",
    "scope": "php",
  },
  "Helper-misc-class_uses-recursive.sublime-snippet": {
    "prefix": "Helper::misc-class_uses_recursive",
    "body": ["class_uses_recursive(${1:'Foo\\Bar\\Baz'})"],
    "description": "Returns all traits used by a class, its subclasses and trait of their traits.",
    "scope": "php",
  },
  "Helper-misc-collect.sublime-snippet": {
    "prefix": "Helper::misc-collect",
    "body": ["collect(${1:'Foo\\Bar\\Baz'})"],
    "description": "Create a collection from the given value.",
    "scope": "php",
  },
  "Helper-misc-csrf_field.sublime-snippet": {
    "prefix": "Helper::misc-csrf_field",
    "body": ["csrf_field()"],
    "description": "Get the value of the current CSRF token.",
    "scope": "php",
  },
  "Helper-misc-csrf_token.sublime-snippet": {
    "prefix": "Helper::misc-csrf_token",
    "body": ["csrf_token()"],
    "description": "Get the value of the current CSRF token.",
    "scope": "php",
  },
  "Helper-misc-dd.sublime-snippet": {
    "prefix": "Helper::misc-dd",
    "body": ["dd(${1:\\$value});"],
    "description": "Dump the passed variables and end the script.",
    "scope": "php",
  },
  "Helper-misc-object_get.sublime-snippet": {
    "prefix": "Helper::misc-object_get",
    "body": ["object_get(${1:\\$object, ${2:'names.john'}, ${3:'default'})"],
    "description": "Get an item from an object using \"dot\" notation.",
    "scope": "php",
  },
  "Helper-misc-trait_uses-recursive.sublime-snippet": {
    "prefix": "Helper::misc-trait_uses_recursive",
    "body": ["trait_uses_recursive(${1:'Foo\\Bar\\Baz'})"],
    "description": "Returns all traits used by a trait and its traits.",
    "scope": "php",
  },
  "Helper-path-app.sublime-snippet": {
    "prefix": "Helper::path-app",
    "body": ["app_path()"],
    "description": "Get the fully qualified path to the app directory.",
    "scope": "php",
  },
  "Helper-path-base.sublime-snippet": {
    "prefix": "Helper::path-base",
    "body": ["base_path(${1:'file'})"],
    "description": "Get the fully qualified path to the root of the application install.",
    "scope": "php",
  },
  "Helper-path-config.sublime-snippet": {
    "prefix": "Helper::path-config",
    "body": ["config_path()"],
    "description": "Get the fully qualified path to the app directory.",
    "scope": "php",
  },
  "Helper-path-elixir.sublime-snippet": {
    "prefix": "Helper::path-elixir",
    "body": ["elixir('${1:file}')"],
    "description": "Get the path to the versionned Elixir file.",
    "scope": "php",
  },
  "Helper-path-public.sublime-snippet": {
    "prefix": "Helper::path-public",
    "body": ["public_path()"],
    "description": "Get the fully qualified path to the public directory.",
    "scope": "php",
  },
  "Helper-path-storage.sublime-snippet": {
    "prefix": "Helper::path-storage",
    "body": ["storage_path(${1:'file'})"],
    "description": "Get the fully qualified path to the app/storage directory.",
    "scope": "php",
  },
  "Helper-strings-camel_case.sublime-snippet": {
    "prefix": "Helper::strings-camel_case",
    "body": ["camel_case(${1:'foo_bar'})"],
    "description": "Convert a value to camel case.",
    "scope": "php",
  },
  "Helper-strings-class_basename.sublime-snippet": {
    "prefix": "Helper::strings-class_basename",
    "body": ["class_basename(${1:'Foo\\Bar\\Baz'})$2"],
    "description": "Get the class \"basename\" of the given object / class.",
    "scope": "php",
  },
  "Helper-strings-e.sublime-snippet": {
    "prefix": "Helper::strings-e",
    "body": ["e(${1:'<html>foo</html>'})"],
    "description": "Escape HTML entities in a string.",
    "scope": "php",
  },
  "Helper-strings-ends_with.sublime-snippet": {
    "prefix": "Helper::strings-ends_with",
    "body": ["ends_with(${1:'haystack'}, ${2:'needles'})"],
    "description": "Determine if a given string ends with a given substring.",
    "scope": "php",
  },
  "Helper-strings-snake_case.sublime-snippet": {
    "prefix": "Helper::strings-snake_case",
    "body": ["snake_case(${1:'fooBar'})"],
    "description": "Convert the given string to snake_case.",
    "scope": "php",
  },
  "Helper-strings-starts_with.sublime-snippet": {
    "prefix": "Helper::strings-starts_with",
    "body": ["starts_with(${1:'haystack'}, ${2:'needle'})"],
    "description": "Determine if the given haystack begins with the given needle.",
    "scope": "php",
  },
  "Helper-strings-str_contains.sublime-snippet": {
    "prefix": "Helper::strings-str_contains",
    "body": ["str_contains(${1:'This is my name'}, ${2:'my'})"],
    "description": "Determine if the given haystack contains the given needle.",
    "scope": "php",
  },
  "Helper-strings-str_finish.sublime-snippet": {
    "prefix": "Helper::strings-str_finish",
    "body": ["str_finish(${1:'this/string'}, ${2:'/'})"],
    "description": "Determine if a given string matches a given pattern. Asterisks may be used to indicate wildcards.",
    "scope": "php",
  },
  "Helper-strings-str_is.sublime-snippet": {
    "prefix": "Helper::strings-str_is",
    "body": ["str_is(${1:'foo*'}, ${2:'foobar'})"],
    "description": "Add a single instance of the given needle to the haystack. Remove any extra instances.",
    "scope": "php",
  },
  "Helper-strings-str_limit.sublime-snippet": {
    "prefix": "Helper::strings-str_limit",
    "body": ["str_limit(${1:\\$value}, ${2:100})"],
    "description": "Limit the number of characters in a string.",
    "scope": "php",
  },
  "Helper-strings-str_random.sublime-snippet": {
    "prefix": "Helper::strings-str_random",
    "body": ["str_random(${1:40})"],
    "description": "Generate a random string of the given length.",
    "scope": "php",
  },
  "Helper-strings-str_singular.sublime-snippet": {
    "prefix": "Helper::strings-str_singular",
    "body": ["str_singular(${1:'string'})"],
    "description": "Convert a string to its singular form (English only).",
    "scope": "php",
  },
  "Helper-strings-str_slug.sublime-snippet": {
    "prefix": "Helper::strings-str_slug",
    "body": ["str_slug(${1:'fooBar'})"],
    "description": "Generate a URL friendly \"slug\" from a given string.",
    "scope": "php",
  },
  "Helper-strings-studly_case.sublime-snippet": {
    "prefix": "Helper::strings-studly_case",
    "body": ["studly_case(${1:'foo_bar'})"],
    "description": "Convert the given string to StudlyCase.",
    "scope": "php",
  },
  "Helper-strings-title_case.sublime-snippet": {
    "prefix": "Helper::strings-title_case",
    "body": ["title_case(${1:'fooBar'})"],
    "description": "Convert a value to title case.",
    "scope": "php",
  },
  "Helper-strings-trans.sublime-snippet": {
    "prefix": "Helper::strings-trans",
    "body": ["trans(${1:'validation.required'})"],
    "description": "Translate a given language line. Alias of Lang::get.",
    "scope": "php",
  },
  "Helper-strings-trans_choice.sublime-snippet": {
    "prefix": "Helper::strings-trans_choice",
    "body": ["trans_choice(${1:'foo.bar'}, ${2:\\$count})"],
    "description": "Translate a given language line with inflection. Alias of Lang::choice.",
    "scope": "php",
  },
  "Helper-strings_plural.sublime-snippet": {
    "prefix": "Helper::strings-str_plural",
    "body": ["str_plural(${1:'string'})"],
    "description": "Convert a string to its plural form (English only).",
    "scope": "php",
  },
  "Helper-url-action.sublime-snippet": {
    "prefix": "Helper::url-action",
    "body": ["action(${1:'HomeController@getIndex'}, ${2:\\$params})"],
    "description": "Generate a URL for a given controller action.",
    "scope": "php",
  },
  "Helper-url-asset.sublime-snippet": {
    "prefix": "Helper::url-asset",
    "body": ["asset(${1:'img/photo.jpg'})"],
    "description": "Generate a URL for an asset.",
    "scope": "php",
  },
  "Helper-url-route.sublime-snippet": {
    "prefix": "Helper::url-route",
    "body": ["route(${1:'routeName'}, ${2:\\$params})"],
    "description": "Generate a URL for a given named route.",
    "scope": "php",
  },
  "Helper-url-secure_asset.sublime-snippet": {
    "prefix": "Helper::url-secure_asset",
    "body": ["secure_asset(${1:'foo/bar'}, ${2:\\$title}, ${3:\\$attributes})"],
    "description": "Generate a HTML link to the given asset using HTTPS.",
    "scope": "php",
  },
  "Helper-url-secure_url.sublime-snippet": {
    "prefix": "Helper::secure_url",
    "body": ["secure_url(${1:'foo/bar'}, ${2:\\$parameters})"],
    "description": "Generate a fully qualified URL to a given path using HTTPS.",
    "scope": "php",
  },
  "Helper-url.sublime-snippet": {
    "prefix": "Helper::url-url",
    "body": ["url(${1:'foo/bar'}, ${2:\\$parameters}, ${3:\\$secure})"],
    "description": "Generate a fully qualified URL to the given path.",
    "scope": "php",
  },
  "Log-alert.sublime-snippet": {
    "prefix": "Log::alert",
    "body": ["Log::alert(\"${1:message}\");"],
    "description": "Log an alert message to the logs.",
    "scope": "php",
  },
  "Log-critical.sublime-snippet": {
    "prefix": "Log::critical",
    "body": ["Log::critical(\"${1:message}\");"],
    "description": "Log a critical message to the logs.",
    "scope": "php",
  },
  "Log-debug.sublime-snippet": {
    "prefix": "Log::debug",
    "body": ["Log::debug(\"${1:message}\");"],
    "description": "Log a debug message to the logs.",
    "scope": "php",
  },
  "Log-emergency.sublime-snippet": {
    "prefix": "Log::emergency",
    "body": ["Log::emergency(\"${1:message}\");"],
    "description": "Log an emergency message to the logs.",
    "scope": "php",
  },
  "Log-error.sublime-snippet": {
    "prefix": "Log::error",
    "body": ["Log::error(\"${1:message}\");"],
    "description": "Log an error message to the logs.",
    "scope": "php",
  },
  "Log-info.sublime-snippet": {
    "prefix": "Log::info",
    "body": ["Log::info(\"${1:message}\");"],
    "description": "Log an informational message to the logs.",
    "scope": "php",
  },
  "Log-log.sublime-snippet": {
    "prefix": "Log::log",
    "body": ["Log::log(\"${1:level}\", \"${2:message}\");"],
    "description": "Log a message to the logs.",
    "scope": "php",
  },
  "Log-notice.sublime-snippet": {
    "prefix": "Log::notice",
    "body": ["Log::notice(\"${1:message}\");"],
    "description": "Log a notice to the logs.",
    "scope": "php",
  },
  "Log-useDailyFiles.sublime-snippet": {
    "prefix": "Log::useDailyFiles",
    "body": ["Log::useDailyFiles('${1:path}', ${2:days}, '${3:level}');"],
    "description": "Register a daily file log handler.",
    "scope": "php",
  },
  "Log-useFiles.sublime-snippet": {
    "prefix": "Log::useFiles",
    "body": ["Log::useFiles('${1:path}', '${2:level}');"],
    "description": "Register a file log handler.",
    "scope": "php",
  },
  "Log-warning.sublime-snippet": {
    "prefix": "Log::warning",
    "body": ["Log::warning(\"${1:message}\");"],
    "description": "Log a warning message to the logs.",
    "scope": "php",
  },
  "Mail-later.sublime-snippet": {
    "prefix": "Mail::later",
    "body": [
      "Mail::later(${1:5}, '${2:Html.view}', ${3:\\$data}, function (${4:\\$message}) {",
      "    ${4}->from(${5:'john@johndoe.com'}, ${6:'John Doe'});",
      "    ${4}->sender(${7:'john@johndoe.com'}, ${8:'John Doe'});",
      "    ${4}->to(${9:'john@johndoe.com'}, ${10:'John Doe'});",
      "    ${4}->cc(${11:'john@johndoe.com'}, ${12:'John Doe'});",
      "    ${4}->bcc(${13:'john@johndoe.com'}, ${14:'John Doe'});",
      "    ${4}->replyTo(${15:'john@johndoe.com'}, ${16:'John Doe'});",
      "    ${4}->subject(${17:'Subject'});",
      "    ${4}->priority(${18:3});",
      "    ${4}->attach(${19:'pathToFile'});",
      "});$20",
    ],
    "description": "Queue a new e-mail message for sending after (n) seconds.",
    "scope": "php",
  },
  "Mail-laterOn.sublime-snippet": {
    "prefix": "Mail::laterOn",
    "body": [
      "Mail::queueOn(${1:'queue-name'}, ${2:5}, '${3:Html.view}', ${4:\\$data}, function (${5:\\$message}) {",
      "    ${5}->from(${6:'john@johndoe.com'}, ${7:'John Doe'});",
      "    ${5}->sender(${8:'john@johndoe.com'}, ${9:'John Doe'});",
      "    ${5}->to(${10:'john@johndoe.com'}, ${11:'John Doe'});",
      "    ${5}->cc(${12:'john@johndoe.com'}, ${13:'John Doe'});",
      "    ${5}->bcc(${14:'john@johndoe.com'}, ${15:'John Doe'});",
      "    ${5}->replyTo(${16:'john@johndoe.com'}, ${17:'John Doe'});",
      "    ${5}->subject(${18:'Subject'});",
      "    ${5}->priority(${19:3});",
      "    ${5}->attach(${20:'pathToFile'});",
      "});$21",
    ],
    "description": "Queue a new e-mail message for sending after (n) seconds on the given queue.",
    "scope": "php",
  },
  "Mail-plain.sublime-snippet": {
    "prefix": "Mail::plain",
    "body": [
      "Mail::plain('${1:plainText.view}', ${2:\\$data}, function (${3:\\$message}) {",
      "    ${3}->from(${4:'john@johndoe.com'}, ${5:'John Doe'});",
      "    ${3}->sender(${6:'john@johndoe.com'}, ${7:'John Doe'});",
      "    ${3}->to(${8:'john@johndoe.com'}, ${9:'John Doe'});",
      "    ${3}->cc(${10:'john@johndoe.com'}, ${11:'John Doe'});",
      "    ${3}->bcc(${12:'john@johndoe.com'}, ${13:'John Doe'});",
      "    ${3}->replyTo(${14:'john@johndoe.com'}, ${15:'John Doe'});",
      "    ${3}->subject(${16:'Subject'});",
      "    ${3}->priority(${17:3});",
      "    ${3}->attach(${18:'pathToFile'});",
      "});$19",
    ],
    "description": "Send a new message when only a plain part.",
    "scope": "php",
  },
  "Mail-queue.sublime-snippet": {
    "prefix": "Mail::queue",
    "body": [
      "Mail::queue('${1:Html.view}', ${2:\\$data}, function (${3:\\$message}) {",
      "    ${3}->from(${4:'john@johndoe.com'}, ${5:'John Doe'});",
      "    ${3}->sender(${6:'john@johndoe.com'}, ${7:'John Doe'});",
      "    ${3}->to(${8:'john@johndoe.com'}, ${9:'John Doe'});",
      "    ${3}->cc(${10:'john@johndoe.com'}, ${11:'John Doe'});",
      "    ${3}->bcc(${12:'john@johndoe.com'}, ${13:'John Doe'});",
      "    ${3}->replyTo(${14:'john@johndoe.com'}, ${15:'John Doe'});",
      "    ${3}->subject(${16:'Subject'});",
      "    ${3}->priority(${17:3});",
      "    ${3}->attach(${18:'pathToFile'});",
      "});$19",
    ],
    "description": "Queue a new e-mail message for sending.",
    "scope": "php",
  },
  "Mail-queueOn.sublime-snippet": {
    "prefix": "Mail::queueOn",
    "body": [
      "Mail::queueOn(${1:'queue-name'}, '${2:Html.view}', ${3:\\$data}, function (${4:\\$message}) {",
      "    ${4}->from(${5:'john@johndoe.com'}, ${6:'John Doe'});",
      "    ${4}->sender(${7:'john@johndoe.com'}, ${8:'John Doe'});",
      "    ${4}->to(${9:'john@johndoe.com'}, ${10:'John Doe'});",
      "    ${4}->cc(${11:'john@johndoe.com'}, ${12:'John Doe'});",
      "    ${4}->bcc(${13:'john@johndoe.com'}, ${14:'John Doe'});",
      "    ${4}->replyTo(${15:'john@johndoe.com'}, ${16:'John Doe'});",
      "    ${4}->subject(${17:'Subject'});",
      "    ${4}->priority(${18:3});",
      "    ${4}->attach(${19:'pathToFile'});",
      "});$20",
    ],
    "description": "Queue a new e-mail message for sending on the given queue.",
    "scope": "php",
  },
  "Mail-raw.sublime-snippet": {
    "prefix": "Mail::raw",
    "body": [
      "Mail::raw('${1:plain text message}', function (${2:\\$message}) {",
      "    ${2}->from(${3:'john@johndoe.com'}, ${4:'John Doe'});",
      "    ${2}->sender(${5:'john@johndoe.com'}, ${6:'John Doe'});",
      "    ${2}->to(${7:'john@johndoe.com'}, ${8:'John Doe'});",
      "    ${2}->cc(${9:'john@johndoe.com'}, ${10:'John Doe'});",
      "    ${2}->bcc(${11:'john@johndoe.com'}, ${12:'John Doe'});",
      "    ${2}->replyTo(${13:'john@johndoe.com'}, ${14:'John Doe'});",
      "    ${2}->subject(${15:'Subject'});",
      "    ${2}->priority(${16:3});",
      "    ${2}->attach(${17:'pathToFile'});",
      "});$18",
    ],
    "description": "Send a new message when only a raw text part.",
    "scope": "php",
  },
  "Mail-send.sublime-snippet": {
    "prefix": "Mail::send",
    "body": [
      "Mail::send('${1:Html.view}', ${2:\\$data}, function (${3:\\$message}) {",
      "    ${3}->from(${4:'john@johndoe.com'}, ${5:'John Doe'});",
      "    ${3}->sender(${6:'john@johndoe.com'}, ${7:'John Doe'});",
      "    ${3}->to(${8:'john@johndoe.com'}, ${9:'John Doe'});",
      "    ${3}->cc(${10:'john@johndoe.com'}, ${11:'John Doe'});",
      "    ${3}->bcc(${12:'john@johndoe.com'}, ${13:'John Doe'});",
      "    ${3}->replyTo(${14:'john@johndoe.com'}, ${15:'John Doe'});",
      "    ${3}->subject(${16:'Subject'});",
      "    ${3}->priority(${17:3});",
      "    ${3}->attach(${18:'pathToFile'});",
      "});$19",
    ],
    "description": "Send a new message using a view.",
    "scope": "php",
  },
  "Mail-to": {
    "prefix": "Mail::to",
    "body": [
      "Mail::to(${1:\\$request->user()})->send(new ${2:MailableClass});$3",
    ],
    "description": "Mail with Mailable - mailer will automatically use collection 'email' and 'name' properties",
    "scope": "php",
  },
  "Mail-to-more": {
    "prefix": "Mail::to-more",
    "body": [
      "Mail::to(${1:\\$request->user()})",
      "    ->cc(${2:\\$moreUsers})",
      "    ->bcc(${3:\\$evenMoreUsers})",
      "    ->send(new ${4:MailableClass});$5",
    ],
    "description": "Mail with Mailable - mail to more recipients",
    "scope": "php",
  },
  "Mail-queue-mailable": {
    "prefix": "Mail::queue-mailable",
    "body": [
      "Mail::to(${1:\\$request->user()})",
      "    ->cc(${2:\\$moreUsers})",
      "    ->bcc(${3:\\$evenMoreUsers})",
      "    ->queue(new ${4:MailableClass});$5",
    ],
    "description": "Mail with Mailable - Queueing A Mail Message",
    "scope": "php",
  },
  "Mail-later-mailable": {
    "prefix": "Mail::later-mailable",
    "body": [
      "Mail::to(${1:\\$request->user()})",
      "    ->cc(${2:\\$moreUsers})",
      "    ->bcc(${3:\\$evenMoreUsers})",
      "    ->later(${4:\\$when}, new ${5:MailableClass});$6",
    ],
    "description": "Mail with Mailable - Delayed Message Queueing",
    "scope": "php",
  },
  "Mailable-build-config": {
    "prefix": "Mailable::build-config",
    "body": [
      "return $this->from('${1:example@example.com}')",
      "    ->${2:view}('${3:mails.viewName}')",
      "    ->with([",
      "            ${4:'orderName' => $this->order->name,}",
      "     ]);$5",
    ],
    "description": "Mailable - Configuring Mailable build()",
    "scope": "php",
  },
  "Laravel Model: Database Connection": {
    "prefix": "Model::con",
    "body": [
      "/**",
      " * The connection name for the model.",
      " *",
      " * @var string|null",
      " */",
      "protected \\$connection = '$0';",
    ],
    "description": "Database Connection: The connection name for the model.",
    "scope": "php",
  },
  "Laravel Model: Table": {
    "prefix": "Model::t",
    "body": [
      "/**",
      " * The table associated with the model.",
      " *",
      " * @var string",
      " */",
      "protected \\$table = '$0';",
    ],
    "description": "Protected Table: The table associated with the model.",
    "scope": "php",
  },
  "Laravel Model: Primary Key": {
    "prefix": "Model::pk",
    "body": [
      "/**",
      " * The primary key for the model.",
      " *",
      " * @var string",
      " */",
      "protected \\$primaryKey = '${1:id}';",
    ],
    "description": "Primary Key: The primary key for the model.",
    "scope": "php",
  },
  "Laravel Model: KeyType": {
    "prefix": "Model::kt",
    "body": [
      "/**",
      " * The \"type\" of the primary key ID.",
      " *",
      " * @var string",
      " */",
      "protected \\$keyType = '${1:int}';",
    ],
    "description": "KeyType: The \"type\" of the primary key ID.",
    "scope": "php",
  },
  "Laravel Model: Incrementing": {
    "prefix": "Model::i",
    "body": [
      "/**",
      " * Indicates if the IDs are auto-incrementing.",
      " *",
      " * @var bool",
      " */",
      "public \\$incrementing = ${1:true};",
    ],
    "description": "Incrementing: Indicates if the IDs are auto-incrementing.",
    "scope": "php",
  },
  "Laravel Model: Timestamps": {
    "prefix": "Model::ts",
    "body": [
      "/**",
      " * Indicates if the model should be timestamped.",
      " *",
      " * @var bool",
      " */",
      "public \\$timestamps = ${1:true};",
    ],
    "description": "Timestamps: Indicates if the model should be timestamped.",
    "scope": "php",
  },
  "Laravel Model: Date Format": {
    "prefix": "Model::df",
    "body": [
      "/**",
      " * The storage format of the model's date columns.",
      " *",
      " * @var string",
      " */",
      "protected \\$dateFormat = '$0';",
    ],
    "description": "Date Format: The storage format of the model's date columns.",
    "scope": "php",
  },
  "Laravel Model: Attribute Casting": {
    "prefix": "Model::c",
    "body": [
      "/**",
      " * The attributes that should be cast.",
      " *",
      " * @var array",
      " */",
      "protected \\$casts = [",
      "\t'$1' => '${0:type}',",
      "];",
    ],
    "description": "Attribute Casting: The attributes that should be cast.",
    "scope": "php",
  },
  "Laravel Model: Mass Assignment (Fillable) ": {
    "prefix": "Model::f",
    "body": [
      "/**",
      " * The attributes that are mass assignable.",
      " *",
      " * @var array<string>",
      " */",
      "protected \\$fillable = ['$0'];",
    ],
    "description": "Mass Assignment (Fillable): The attributes that are mass assignable.",
    "scope": "php",
  },
  "Laravel Model: Guard Attributes": {
    "prefix": "Model::g",
    "body": [
      "/**",
      " * The attributes that aren't mass assignable.",
      " *",
      " * @var array<string>",
      " */",
      "protected \\$guarded = ['${1:*}'];",
    ],
    "description": "Guard Attributes: The attributes that aren't mass assignable.",
    "scope": "php",
  },
  "Laravel Model: Dates": {
    "prefix": "Model::d",
    "body": [
      "/**",
      " * The attributes that should be mutated to dates.",
      " *",
      " * @var array",
      " */",
      "protected \\$dates = ['created_at', 'updated_at', '${0:deleted_at}'];",
    ],
    "description": "Dates: The attributes that should be mutated to dates.",
    "scope": "php",
  },
  "Laravel Model: Boot": {
    "prefix": "Model::b",
    "body": [
      "/**",
      " * The \"booting\" method of the model.",
      " *",
      " * @return void",
      " */",
      "protected static function boot()",
      "{",
      "\tparent::boot();",
      "\t",
      "\t$0",
      "}",
    ],
    "description": "Boot: The \"booting\" method of the model.",
    "scope": "php",
  },
  "Laravel Model: Local Scope": {
    "prefix": "Model::s",
    "body": [
      "/**",
      " * Scope a query to only include $1",
      " *",
      " * @param  \\Illuminate\\Database\\Eloquent\\Builder \\$query",
      " * @return \\Illuminate\\Database\\Eloquent\\Builder",
      " */",
      "public function scope$2(\\$query)",
      "{",
      "\treturn \\$query->where('$3'$0);",
      "}",
    ],
    "description": "Local Scope: Query a local scope within your model.",
    "scope": "php",
  },
  "Laravel Model: Hidden": {
    "prefix": "Model::h",
    "body": [
      "/**",
      " * The attributes that should be hidden for arrays.",
      " *",
      " * @var array",
      " */",
      "protected \\$hidden = ['$0'];",
    ],
    "description": "Hidden: The attributes that should be hidden for arrays.",
    "scope": "php",
  },
  "Laravel Model: Visible": {
    "prefix": "Model::v",
    "body": [
      "/**",
      " * The attributes that should be visible in arrays.",
      " *",
      " * @var array",
      " */",
      "protected \\$visible = ['$0'];",
    ],
    "description": "Visible: The attributes that should be visible in arrays.",
    "scope": "php",
  },
  "Laravel Model: Appends": {
    "prefix": "Model::ap",
    "body": [
      "/**",
      " * The accessors to append to the model's array form.",
      " *",
      " * @var array",
      " */",
      "protected \\$appends = ['$0'];",
    ],
    "description": "Appends: The accessors to append to the model's array form.",
    "scope": "php",
  },
  "Laravel Model: Touches": {
    "prefix": "Model::tc",
    "body": [
      "/**",
      " * The relationships that should be touched on save.",
      " *",
      " * @var array",
      " */",
      "protected \\$touches = [$0];",
    ],
    "description": "Touches: The relationships that should be touched on save.",
    "scope": "php",
  },
  "Laravel Model: PerPage": {
    "prefix": "Model::pp",
    "body": [
      "/**",
      " * The number of models to return for pagination.",
      " *",
      " * @var int",
      " */",
      "protected \\$perPage = $0;",
    ],
    "description": "PerPage: The number of models to return for pagination.",
    "scope": "php",
  },
  "Laravel Model: Created At": {
    "prefix": "Model::cat",
    "body": [
      "/**",
      " * The name of the \"created at\" column.",
      " *",
      " * @var string|null",
      " */",
      "const CREATED_AT = '${1:created_at}';$0",
    ],
    "description": "Created At: The name of the \"created at\" column.",
    "scope": "php",
  },
  "Laravel Model: Updated At": {
    "prefix": "Model::uat",
    "body": [
      "/**",
      " * The name of the \"updated at\" column.",
      " *",
      " * @var string|null",
      " */",
      "const UPDATED_AT = '${1:updated_at}';$0",
    ],
    "description": "Updated At: The name of the \"updated at\" column.",
    "scope": "php",
  },
  "Laravel Model: Deleted At": {
    "prefix": "Model::dat",
    "body": [
      "/**",
      " * The name of the \"deleted at\" column.",
      " *",
      " * @var string",
      " */",
      "const DELETED_AT = '${1:deleted_at}';$0",
    ],
    "description": "Deleted At: The name of the \"deleted at\" column.",
    "scope": "php",
  },
  "Laravel Model: Dispatches Events": {
    "prefix": "Model::de",
    "body": [
      "/**",
      " * The event map for the model.",
      " *",
      " * @var array",
      " */",
      "protected \\$dispatchesEvents = [",
      "\t'$1' => $2,",
      "];",
    ],
    "description": "Dispatches Events: The event map for the model.",
    "scope": "php",
  },
  "Laravel Model: Accessor": {
    "prefix": "Model::ac",
    "body": [
      "/**",
      " * Get the $1",
      " *",
      " * @param  string  \\$value",
      " * @return ${4:string}",
      " */",
      "public function get$2Attribute(\\$value)",
      "{",
      "\treturn ${3:\\$value};",
      "}",
    ],
    "description": "Accessors: Define an accessor for the model.",
    "scope": "php",
  },
  "Laravel Model: Mutator": {
    "prefix": "Model::mu",
    "body": [
      "/**",
      " * Set the $1",
      " *",
      " * @param  string  \\$value",
      " * @return ${5:void}",
      " */",
      "public function set$2Attribute(\\$value)",
      "{",
      "\treturn \\$this->attributes['$3'] = ${4:\\$value};",
      "}",
    ],
    "description": "Mutators: Define a mutator for the model.",
    "scope": "php",
  },
  "Laravel Model: Attribute": {
    "prefix": "Model::att",
    "body": [
      "/**",
      " * Interact with the $1 attribute.",
      " *",
      " * return \\Illuminate\\Database\\Eloquent\\Casts\\Attribute",
      " */",
      "public function $1(): Attribute",
      "{",
      "\treturn Attribute::make(",
      "\t\tget: fn ($2 \\$value) => $3,",
      "\t\tset: fn ($2 \\$value) => $4,",
      "\t);",
      "}",
    ],
    "description": "Attribute: Define a attribute method for the model.",
    "scope": "php",
  },
  "Laravel Model: Get attribute": {
    "prefix": "Model::gatt",
    "body": [
      "/**",
      " * Interact with the $1 attribute.",
      " *",
      " * return \\Illuminate\\Database\\Eloquent\\Casts\\Attribute",
      " */",
      "public function $1(): Attribute",
      "{",
      "\treturn Attribute::get(fn ($2 \\$value) => $3);",
      "}",
    ],
    "description": "Attribute: Define a get attribute method for the model.",
    "scope": "php",
  },
  "Laravel Model: Set attribute": {
    "prefix": "Model::satt",
    "body": [
      "/**",
      " * Interact with the $1 attribute.",
      " *",
      " * return \\Illuminate\\Database\\Eloquent\\Casts\\Attribute",
      " */",
      "public function $1(): Attribute",
      "{",
      "\treturn Attribute::set(fn ($2 \\$value) => $3);",
      "}",
    ],
    "description": "Attribute: Define a set attribute method for the model.",
    "scope": "php",
  },
  "Laravel Model: Prevents lazy loading": {
    "prefix": "Model::pll",
    "body": [
      "/**",
      " * Indicates whether lazy loading will be prevented on this model..",
      " *",
      " * @var bool",
      " */",
      "protected \\$preventsLazyLoading = $0;",
    ],
    "description": "Prevents lazy loading: Indicates whether lazy loading will be prevented on this model..",
    "scope": "php",
  },
  "Passport-routes": {
    "prefix": "Passport::routes",
    "body": ["Passport::routes();"],
    "description": "Passport - routes",
    "scope": "php",
  },
  "Passport-tokensExpireIn": {
    "prefix": "Passport::tokensExpireIn",
    "body": ["Passport::tokensExpireIn(Carbon::now()->addDays(${1:15}));$2"],
    "description": "Passport - tokensExpireIn",
    "scope": "php",
  },
  "Passport-refreshTokensExpireIn": {
    "prefix": "Passport::refreshTokensExpireIn",
    "body": [
      "Passport::refreshTokensExpireIn(Carbon::now()->addDays(${1:30}));$2",
    ],
    "description": "Passport - refreshTokensExpireIn",
    "scope": "php",
  },
  "Passport-pruneRevokedTokens": {
    "prefix": "Passport::pruneRevokedTokens",
    "body": ["Passport::pruneRevokedTokens();"],
    "description": "Passport - pruneRevokedTokens",
    "scope": "php",
  },
  "Redirect-action.sublime-snippet": {
    "prefix": "Redirect::action",
    "body": [
      "return redirect()->action('${App\\Http\\Controllers\\HomeController@index}', ${2:['parameterKey' => 'value']});$3",
    ],
    "description": "Redirect to a controller action, with parameters",
    "scope": "php",
  },
  "Redirect-back.sublime-snippet": {
    "prefix": "Redirect::back",
    "body": [
      "return redirect()->back()${1:->withErrors(\\$validator)}${2:->withInput()};$3",
    ],
    "description": "Redirect to URL, Route or Controller",
    "scope": "php",
  },
  "Redirect-namedRoute.sublime-snippet": {
    "prefix": "Redirect::namedRoute",
    "body": [
      "return redirect()->route('${named_route}', ${2:['parameterKey' => 'value']});$3",
    ],
    "description": "Redirect to a named route, with parameters",
    "scope": "php",
  },
  "Redirect-to.sublime-snippet": {
    "prefix": "Redirect::to",
    "body": ["return redirect('${1:some/url}');$2"],
    "description": "Redirect to URL, Route or Controller",
    "scope": "php",
  },
  "Redirect-withErrors.sublime-snippet": {
    "prefix": "Redirect::withErrors",
    "body": ["->withErrors(${1:\\$validator})$2"],
    "description": "Redirect to URL, Route or Controller with Errors",
    "scope": "php",
  },
  "Redirect-withFlashData.sublime-snippet": {
    "prefix": "Redirect::withFlashData",
    "body": ["->with('${1:flashKey}', '${2:flashValue}')$3"],
    "description": "Redirect to URL, Route or Controller with Flash Data",
    "scope": "php",
  },
  "Redirect-withInput.sublime-snippet": {
    "prefix": "Redirect::withInput",
    "body": ["->withInput(${1:[1, 2])})$2"],
    "description": "Redirect to URL, Route or Controller with Input",
    "scope": "php",
  },
  "Redirect-withInputAndErrors.sublime-snippet": {
    "prefix": "Redirect::withInputAndErrors",
    "body": [
      "->withInput(${1:\\$request->except('key')})",
      "->withErrors(${2:\\$validator})$3",
    ],
    "description": "Redirect with Inputs and Errors",
    "scope": "php",
  },
  "Redirect-withNamedInput.sublime-snippet": {
    "prefix": "Redirect::withNamedInput",
    "body": ["->withInput(${1:['key' => 'value'])})$2"],
    "description": "Redirect to URL, Route or Controller with Input",
    "scope": "php",
  },
  "Relation-belongsTo.sublime-snippet": {
    "prefix": "Relation::belongsTo",
    "body": [
      "/**",
      " * Get the ${1:user} that owns the ${TM_FILENAME_BASE}",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
      " */",
      "public function ${1:user}(): BelongsTo",
      "{",
      "    return \\$this->belongsTo(${2:User}::class${3:, '${4:foreign_key}'}${5:, '${6:other_key}'});",
      "}$7",
    ],
    "description": "A one-to-one inverse relationship.",
    "scope": "php",
  },
  "Relation-belongsToMany.sublime-snippet": {
    "prefix": "Relation::belongsToMany",
    "body": [
      "/**",
      " * The ${1:roles} that belong to the ${TM_FILENAME_BASE}",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
      " */",
      "public function ${1:roles}(): BelongsToMany",
      "{",
      "    return \\$this->belongsToMany(${2:Role}::class${3:, '${4:role_user_table}'}${5:, '${6:user_id}'}${7:, '${8:role_id}'});",
      "}$9",
    ],
    "description": "A many-to-many relationship.",
    "scope": "php",
  },
  "Relation-hasMany.sublime-snippet": {
    "prefix": "Relation::hasMany",
    "body": [
      "/**",
      " * Get all of the ${1:comments} for the ${TM_FILENAME_BASE}",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasMany",
      " */",
      "public function ${1:comments}(): HasMany",
      "{",
      "    return \\$this->hasMany(${2:Comment}::class${3:, '${4:foreign_key}'}${5:, '${6:local_key}'});",
      "}$7",
    ],
    "description": "A one-to-many relationship.",
    "scope": "php",
  },
  "Relation-hasManyThrough.sublime-snippet": {
    "prefix": "Relation::hasManyThrough",
    "body": [
      "/**",
      " * Get all of the ${1:comments} for the ${TM_FILENAME_BASE}",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
      " */",
      "public function ${1:comments}(): HasManyThrough",
      "{",
      "    return \\$this->hasManyThrough(${2:Comment}::class, ${3:Post}::class);",
      "}$4",
    ],
    "description": "A Has Many Through relationship.",
    "scope": "php",
  },
  "Relation-hasOne.sublime-snippet": {
    "prefix": "Relation::hasOne",
    "body": [
      "/**",
      " * Get the ${1:user} associated with the ${TM_FILENAME_BASE}",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasOne",
      " */",
      "public function ${1:user}(): HasOne",
      "{",
      "    return \\$this->hasOne(${2:User}::class${3:, '${4:foreign_key}'}${5:, '${6:local_key}'});",
      "}$7",
    ],
    "description": "A one-to-one relationship.",
    "scope": "php",
  },
  "Request-method.sublime-snippet": {
    "prefix": "Request::method",
    "body": ["\\$request->method()"],
    "description": "Get the request method (GET, POST, ...).",
    "scope": "php",
  },
  "Request-root.sublime-snippet": {
    "prefix": "Request::root",
    "body": ["\\$request->root()"],
    "description": "Get the root URL for the application.",
    "scope": "php",
  },
  "Request-url.sublime-snippet": {
    "prefix": "Request::url",
    "body": ["\\$request->url()"],
    "description": "Get the URL (no query string) for the request.",
    "scope": "php",
  },
  "Request-fullUrl.sublime-snippet": {
    "prefix": "Request::fullUrl",
    "body": ["\\$request->fullUrl()"],
    "description": "Get the full URL for the request.",
    "scope": "php",
  },
  "Request-fullUrlWithQuery": {
    "prefix": "Request::fullUrlWithQuery",
    "body": ["\\$request->fullUrlWithQuery(${1:\\$query})$2"],
    "description": "Get the full URL for the request with the added query string parameters.",
    "scope": "php",
  },
  "Request-path.sublime-snippet": {
    "prefix": "Request::path",
    "body": ["\\$request->path()"],
    "description": "Get the current path info for the request.",
    "scope": "php",
  },
  "Request-decodedPath.sublime-snippet": {
    "prefix": "Request::decodedPath",
    "body": ["\\$request->decodedPath()"],
    "description": "Get the current encoded path info for the request.",
    "scope": "php",
  },
  "Request-segment.sublime-snippet": {
    "prefix": "Request::segment",
    "body": ["\\$request->segment(${1:\\$index}, '${2:default}')$3"],
    "description": "Get a segment from the URI (1 based index).",
    "scope": "php",
  },
  "Request-segments.sublime-snippet": {
    "prefix": "Request::segments",
    "body": ["\\$request->segments()"],
    "description": "Get all of the segments for the request path.",
    "scope": "php",
  },
  "Request-is": {
    "prefix": "Request::is",
    "body": ["\\$request->is()"],
    "description": "Determine if the current request URI matches a pattern.",
    "scope": "php",
  },
  "Request-fullUrlIs": {
    "prefix": "Request::fullUrlIs",
    "body": ["\\$request->fullUrlIs()"],
    "description": "Determine if the current request URL and query string matches a pattern.",
    "scope": "php",
  },
  "Request-ajax.sublime-snippet": {
    "prefix": "Request::ajax",
    "body": ["\\$request->ajax()"],
    "description": "Determine if the request is the result of an AJAX call.",
    "scope": "php",
  },
  "Request-pjax.sublime-snippet": {
    "prefix": "Request::pjax",
    "body": ["\\$request->pjax()"],
    "description": "Determine if the request is the result of an PJAX call.",
    "scope": "php",
  },
  "Request-secure.sublime-snippet": {
    "prefix": "Request::secure",
    "body": ["\\$request->secure()"],
    "description": "Determine if the request is over HTTPS.",
    "scope": "php",
  },
  "Request-ip.sublime-snippet": {
    "prefix": "Request::ip",
    "body": ["\\$request->ip()"],
    "description": "Returns the client IP address.",
    "scope": "php",
  },
  "Request-ips.sublime-snippet": {
    "prefix": "Request::ips",
    "body": ["\\$request->ips()"],
    "description": "Returns the client IP addresses.",
    "scope": "php",
  },
  "Request-exists.sublime-snippet": {
    "prefix": "Request::exists",
    "body": ["\\$request->exists('${1:key}')$2"],
    "description": "Determine if the request contains a given input item key.",
    "scope": "php",
  },
  "Request-has.sublime-snippet": {
    "prefix": "Request::has",
    "body": ["\\$request->has('${1:key}')$2"],
    "description": "Determine if the request contains a non-empty value for an input item.",
    "scope": "php",
  },
  "Request-all.sublime-snippet": {
    "prefix": "Request::all",
    "body": ["\\$request->all()"],
    "description": "Get all of the input and files for the request.",
    "scope": "php",
  },
  "Request-input.sublime-snippet": {
    "prefix": "Request::input",
    "body": ["\\$request->input('${1:key}'${2:, 'default'})$3"],
    "description": "Retrieve an input item from the request.",
    "scope": "php",
  },
  "Request-only.sublime-snippet": {
    "prefix": "Request::only",
    "body": ["\\$request->only(${1:\\$keys})$2"],
    "description": "Get a subset of the items from the input data.",
    "scope": "php",
  },
  "Request-except.sublime-snippet": {
    "prefix": "Request::except",
    "body": ["\\$request->except(${1:\\$keys})$2"],
    "description": "Get all of the input except for a specified array of items.",
    "scope": "php",
  },
  "Request-intersect": {
    "prefix": "Request::intersect",
    "body": ["\\$request->intersect(${1:\\$keys})$2"],
    "description": "Intersect an array of items with the input data.",
    "scope": "php",
  },
  "Request-query.sublime-snippet": {
    "prefix": "Request::query",
    "body": ["\\$request->query('${1:key}', '${2:default'})$3"],
    "description": "Retrieve a query string item from the request.",
    "scope": "php",
  },
  "Request-hasCookie": {
    "prefix": "Request::hasCookie",
    "body": ["\\$request->hasCookie('${1:key}')$2"],
    "description": "Determine if a cookie is set on the request.",
    "scope": "php",
  },
  "Request-cookie": {
    "prefix": "Request::cookie",
    "body": ["\\$request->cookie('${1:key}', '${2:default'})$3"],
    "description": "Retrieve a cookie from the request.",
    "scope": "php",
  },
  "Request-allFiles.sublime-snippet": {
    "prefix": "Request::allFiles",
    "body": ["\\$request->allFiles()"],
    "description": "Get an array of all of the files on the request.",
    "scope": "php",
  },
  "Request-file.sublime-snippet": {
    "prefix": "Request::file",
    "body": ["\\$request->file('${1:key}'${2:, 'default'})$2"],
    "description": "Retrieve a file from the request.",
    "scope": "php",
  },
  "Request-hasFile.sublime-snippet": {
    "prefix": "Request::hasFile",
    "body": ["\\$request->hasFile('${1:key}')$2"],
    "description": "Determine if the uploaded data contains a file.",
    "scope": "php",
  },
  "Request-hasHeader": {
    "prefix": "Request::hasHeader",
    "body": ["\\$request->hasHeader('${1:key}')$2"],
    "description": "Determine if a header is set on the request.",
    "scope": "php",
  },
  "Request-header.sublime-snippet": {
    "prefix": "Request::header",
    "body": ["\\$request->header('${1:key}', ${2:\\$default})$3"],
    "description": "Retrieve a header from the request.",
    "scope": "php",
  },
  "Request-server": {
    "prefix": "Request::server",
    "body": ["\\$request->server('${1:key}', ${2:\\$default})$3"],
    "description": "Retrieve a server variable from the request.",
    "scope": "php",
  },
  "Request-old.sublime-snippet": {
    "prefix": "Request::old",
    "body": ["\\$request->old('${1:key}'${2:, 'default'})$3"],
    "description": "Retrieve an old input item.",
    "scope": "php",
  },
  "Input-flash.sublime-snippet": {
    "prefix": "Request::flash",
    "body": ["\\$request->flash();"],
    "description": "Flash Input to the Session",
    "scope": "php",
  },
  "Input-flashOnly.sublime-snippet": {
    "prefix": "Request::flashOnly",
    "body": ["\\$request->flashOnly(${1:\\$keys});$2"],
    "description": "Flash only some Input to the Session",
    "scope": "php",
  },
  "Input-flashExcept.sublime-snippet": {
    "prefix": "Request::flashExcept",
    "body": ["\\$request->flashExcept(${1:\\$keys});$2"],
    "description": "Flash only some Input to the Session",
    "scope": "php",
  },
  "Request-flush": {
    "prefix": "Request::flush",
    "body": ["\\$request->flush();"],
    "description": "Flush all of the old input from the session.",
    "scope": "php",
  },
  "Request-merge": {
    "prefix": "Request::merge",
    "body": ["\\$request->merge(${1:\\$input})$2"],
    "description": "Merge new input into the current request's input array.",
    "scope": "php",
  },
  "Request-replace": {
    "prefix": "Request::replace",
    "body": ["\\$request->replace(${1:\\$input})$2"],
    "description": "Replace the input for the current request.",
    "scope": "php",
  },
  "Request-json.sublime-snippet": {
    "prefix": "Request::json",
    "body": ["\\$request->json()"],
    "description": "Determine if the request is sending JSON.",
    "scope": "php",
  },
  "Request-isJson": {
    "prefix": "Request::isJson",
    "body": ["\\$request->isJson()"],
    "description": "Determine if the request is sending JSON.",
    "scope": "php",
  },
  "Request-wantsJson": {
    "prefix": "Request::wantsJson",
    "body": ["\\$request->wantsJson()"],
    "description": "Determine if the current request is asking for JSON in return.",
    "scope": "php",
  },
  "Request-accepts": {
    "prefix": "Request::accepts",
    "body": ["\\$request->accepts(${1:\\$contentTypes})$2"],
    "description": "Determines whether the current requests accepts a given content type.",
    "scope": "php",
  },
  "Request-prefers": {
    "prefix": "Request::prefers",
    "body": ["\\$request->prefers(${1:\\$contentTypes})$2"],
    "description": "Return the most suitable content type from the given array based on content negotiation.",
    "scope": "php",
  },
  "Request-acceptsJson": {
    "prefix": "Request::acceptsJson",
    "body": ["\\$request->acceptsJson()"],
    "description": "Determines whether a request accepts JSON.",
    "scope": "php",
  },
  "Request-acceptsHtml": {
    "prefix": "Request::acceptsHtml",
    "body": ["\\$request->acceptsHtml()"],
    "description": "Determines whether a request accepts HTML.",
    "scope": "php",
  },
  "Request-format": {
    "prefix": "Request::format",
    "body": ["\\$request->format('${1:html}')$2"],
    "description": "Get the data format expected in the response.",
    "scope": "php",
  },
  "Request-bearerToken": {
    "prefix": "Request::bearerToken",
    "body": ["\\$request->bearerToken()"],
    "description": "Get the bearer token from the request headers.",
    "scope": "php",
  },
  "Request-session.sublime-snippet": {
    "prefix": "Request::session",
    "body": ["\\$request->session()"],
    "description": "Get the session associated with the request.",
    "scope": "php",
  },
  "Request-user.sublime-snippet": {
    "prefix": "Request::user",
    "body": ["\\$request->user()"],
    "description": "Get the user making the request.",
    "scope": "php",
  },
  "Request-route": {
    "prefix": "Request::route",
    "body": ["\\$request->route(${1:\\$param})"],
    "description": "Get the route handling the request.",
    "scope": "php",
  },
  "Request-fingerprint.sublime-snippet": {
    "prefix": "Request::fingerprint",
    "body": ["\\$request->fingerprint()"],
    "description": "Get a unique fingerprint for the request / route / IP address.",
    "scope": "php",
  },
  "Request-getUserResolver": {
    "prefix": "Request::getUserResolver",
    "body": ["\\$request->getUserResolver()"],
    "description": "Get the user resolver callback.",
    "scope": "php",
  },
  "Request-setUserResolver": {
    "prefix": "Request::setUserResolver",
    "body": ["\\$request->setUserResolver(${1:\\$callback})$2"],
    "description": "Set the user resolver callback.",
    "scope": "php",
  },
  "Request-getRouteResolver": {
    "prefix": "Request::getRouteResolver",
    "body": ["\\$request->getRouteResolver()"],
    "description": "Get the route resolver callback.",
    "scope": "php",
  },
  "Request-setRouteResolver": {
    "prefix": "Request::setRouteResolver",
    "body": ["\\$request->setRouteResolver(${1:\\$callback})$2"],
    "description": "Set the route resolver callback.",
    "scope": "php",
  },
  "Request-toArray": {
    "prefix": "Request::toArray",
    "body": ["\\$request->toArray()"],
    "description": "Get all of the input and files for the request.",
    "scope": "php",
  },
  "Request-offsetExists": {
    "prefix": "Request::offsetExists",
    "body": ["\\$request->offsetExists('${1:offset}')$2"],
    "description": "Determine if the given offset exists.",
    "scope": "php",
  },
  "Request-offsetSet": {
    "prefix": "Request::offsetSet",
    "body": ["\\$request->offsetSet('${1:offset}', ${2:\\$value});$3"],
    "description": "Set the value at the given offset.",
    "scope": "php",
  },
  "Request-offsetUnset": {
    "prefix": "Request::offsetUnset",
    "body": ["\\$request->offsetUnset('${1:offset}');$2"],
    "description": "Remove the value at the given offset.",
    "scope": "php",
  },
  "Response-download.sublime-snippet": {
    "prefix": "Response::download",
    "body": [
      "return response()->download(${1:\\$pathToFile}, ${2:\\$name}, ${3:\\$headers});",
    ],
    "description": "Create a File Download Response",
    "scope": "php",
  },
  "Response-json.sublime-snippet": {
    "prefix": "Response::json",
    "body": [
      "return response()->json(${1:\\$data}, ${2:200}, ${3:\\$headers});",
    ],
    "description": "Create a JSON Response",
    "scope": "php",
  },
  "Response-JSONP.sublime-snippet": {
    "prefix": "Response::jsonp",
    "body": [
      "return response()->jsonp(${1:\\$callback}, ${2:\\$data}, ${3:200}, ${4:\\$headers});",
    ],
    "description": "Create a JSONP Response",
    "scope": "php",
  },
  "Response-make.sublime-snippet": {
    "prefix": "Response::make",
    "body": [
      "return Response::make(${1:\\$contents}, ${2:200}, ${3:\\$headers});",
    ],
    "description": "Create a Custom Response",
    "scope": "php",
  },
  "Route-any.sublime-snippet": {
    "prefix": "Route::any",
    "body": [
      "Route::any('${2:users/{id\\}}', function (${3:\\$id}) {",
      "    $4",
      "});",
    ],
    "description": "Basic Route with Closure.",
    "scope": "php",
  },
  "Route-closure.sublime-snippet": {
    "prefix": "Route::closure",
    "body": [
      "Route::${1:get}('${2:users/{id\\}}', function (${3:\\$id}) {",
      "    $4",
      "});",
    ],
    "description": "Basic Route with Closure.",
    "scope": "php",
  },
  "Route-controller.sublime-snippet": {
    "prefix": "Route::controller",
    "body": ["Route::controller('${1:users}', '${2:UserController}');"],
    "description": "Route a controller to a URI with wildcard routing. (Deprecated)",
    "scope": "php",
  },
  "Route-controllerAction.sublime-snippet": {
    "prefix": "Route-controllerAction",
    "body": [
      "Route::${1:get}('${2:users/{id\\}}', [${3:$User}Controller::class, '${4:index}'])->name('${5:user.index}');",
    ],
    "description": "Basic route to a controller action.",
    "scope": "php",
  },
  "Route-current": {
    "prefix": "Route::current",
    "body": "Route::current()",
    "description": "Accessing current route; Return type: Illuminate\\Routing\\Route",
    "scope": "php",
  },
  "Route-currentRouteName": {
    "prefix": "Route::currentRouteName",
    "body": "Route::currentRouteName()",
    "description": "Accessing current route; Return type: string",
    "scope": "php",
  },
  "Route-currentRouteAction.sublime-snippet": {
    "prefix": "Route::currentRouteAction",
    "body": ["Route::currentRouteAction();"],
    "description": "Get the current route name.",
    "scope": "php",
  },
  "Route-delete.sublime-snippet": {
    "prefix": "Route::delete",
    "body": [
      "Route::delete('${1:users/{id\\}}', function (${2:\\$id}) {",
      "    $3",
      "});",
    ],
    "description": "Basic Delete Route.",
    "scope": "php",
  },
  "Route-dispatch": {
    "prefix": "Route::dispatch",
    "body": "Route::dispatch(${1:\\$request});",
    "description": "Dispatch the request to the application.",
    "scope": "php",
  },
  "Route-dispatchToRoute": {
    "prefix": "Route::dispatchToRoute",
    "body": "Route::dispatchToRoute(${1:\\$request});",
    "description": "Dispatch the request to a route and return the response.",
    "scope": "php",
  },
  "Route-get.sublime-snippet": {
    "prefix": "Route::get",
    "body": [
      "Route::get('${1:users/{id\\}}', function (${2:\\$id}) {",
      "    $3",
      "});",
    ],
    "description": "Basic Get Route.",
    "scope": "php",
  },
  "Router-post.sublime-snippet": {
    "prefix": "Route::post",
    "body": [
      "Route::post('${1:users/{id\\}}', function (${2:\\$id}) {",
      "    $3",
      "});",
    ],
    "description": "Basic Post Route.",
    "scope": "php",
  },
  "Route-get-with-name": {
    "prefix": "Route-get-name",
    "body": "Route::get('${1:user}', '${2:User}Controller@${3:index}')->name('${4:user}');",
    "description": "Get route with naming",
    "scope": "php",
  },
  "Route-post-with-name": {
    "prefix": "Route-post-name",
    "body": "Route::post('${1:user}', '${2:User}Controller@${3:index}')->name('${4:user}');",
    "description": "Post route with naming",
    "scope": "php",
  },
  "Route-group.sublime-snippet": {
    "prefix": "Route::group",
    "body": [
      "Route::prefix('${1:admin}')->group(function () {",
      "    $2",
      "});",
    ],
    "description": "Create a Group of Routes",
    "scope": "php",
  },
  "Route-group-middleware": {
    "prefix": "Route::group-middleware",
    "body": [
      "Route::middleware(['${1:auth}'${2:, '${3:second}'}])->group(function () {",
      "    $4",
      "});",
    ],
    "description": "Create a Group of Routers with middleware defined in RouteServiceProvider",
    "scope": "php",
  },
  "Route-match.sublime-snippet": {
    "prefix": "Route::match",
    "body": [
      "Route::match([${1:'get', 'post'}], '${2:/user/profile}', function () {",
      "    $3",
      "});",
    ],
    "description": "Register a new route with the given verbs.",
    "scope": "php",
  },
  "Route-put.sublime-snippet": {
    "prefix": "Route::put",
    "body": [
      "Route::put('${1:users/{id\\}}', function (${2:\\$id}) {",
      "    $3",
      "});",
    ],
    "description": "Basic Put Route.",
    "scope": "php",
  },
  "Route-resource.sublime-snippet": {
    "prefix": "Route::resource",
    "body": ["Route::resource('${1:user}', ${2:User}Controller::class);"],
    "description": "Route to a RESTful Controller",
    "scope": "php",
  },
  "Route-when.sublime-snippet": {
    "prefix": "Route::when",
    "body": ["\\$router->when('${1:admin/*}', '${2:admin}', ${3:['post']})$4"],
    "description": "Pattern based filters on routes",
    "scope": "php",
  },
  "Router-model.sublime-snippet": {
    "prefix": "Route::model",
    "body": ["\\$router->model('${1:user}', '${2:App\\Models\\User}')$3"],
    "description": "Register a model binder for a wildcard.",
    "scope": "php",
  },
  "Router-pattern.sublime-snippet": {
    "prefix": "Route::pattern",
    "body": ["\\$router->pattern('${1:id}', '${2:[0-9]+}')$3"],
    "description": "Set a global where pattern on all routes.",
    "scope": "php",
  },
  "Route-redirect": {
    "prefix": "Route::redirect",
    "body": "Route::redirect('${1:URI}', '${2:URI}', ${3:301});",
    "description": "a convenient shortcut for performing a simple redirect",
    "scope": "php",
  },
  "Route-view": {
    "prefix": "Route::view",
    "body": "Route::view('${1:URI}', '${2:viewName}');",
    "description": "route only needs to return a view; you may provide an array of data to pass to the view as an optional third argument",
    "scope": "php",
  },
  "Route-controller-group": {
    "prefix": "Rotue-controller-group",
    "body": [
      "Route::controller(${1:Order}Controller::class)->group(function () {",
      "    Route::get('/${2:orders}/{id}', 'show');",
      "    Route::post('/${2:orders}', 'store');",
      "});",
    ],
    "description": "Controller route groups (Laravel 9.x)",
    "scope": "php",
  },
  "Route-get-scopeBindings": {
    "prefix": "Route-get-scopeBindings",
    "body": [
      "Route::get('${1:/users/{user\\}/posts/{post\\}}', function (${2:User \\$user, Post \\$post}) {",
      "    return ${3:\\$post};",
      "})->scopeBindings();",
    ],
    "description": "Scope binding (Laravel 9.x)",
    "scope": "php",
  },
  "Route-group-scopeBindings": {
    "prefix": "Route-group-scopeBindings",
    "body": ["Route::scopeBindings()->group(function () {", "   $1", "});"],
    "description": "Group scope binding (Laravel 9.x)",
    "scope": "php",
  },
  "Schema-connection.sublime-snippet": {
    "prefix": "Schema::connection",
    "body": [
      "Schema::connection('${1:foo}')->create('${2:users}', function (${3:\\$table}) {",
      "    \\$table->bigIncrements('id');$0",
      "});",
    ],
    "description": "Specify connection for schema operation",
    "scope": "php",
  },
  "Schema-create-table.sublime-snippet": {
    "prefix": "Schema::create-table",
    "body": [
      "Schema::create('${1:users}', function (Blueprint \\$table) {",
      "    \\$table->bigIncrements('id');",
      "    $0",
      "    \\$table->timestamps();",
      "});",
    ],
    "description": "Create new table",
    "scope": "php",
  },
  "Schema-drop.sublime-snippet": {
    "prefix": "Schema::drop",
    "body": ["Schema::drop('${1:table}');$0"],
    "description": "Drop an existing database table",
    "scope": "php",
  },
  "Schema-dropIfExists.sublime-snippet": {
    "prefix": "Schema::dropIfExists",
    "body": ["Schema::dropIfExists('${1:table}');$0"],
    "description": "Drop an existing database table if it exists",
    "scope": "php",
  },
  "Schema-hasColumn.sublime-snippet": {
    "prefix": "Schema::hasColumn",
    "body": [
      "if (Schema::hasColumn('${1:table}', '${2:column}')) {",
      "    $0",
      "}",
    ],
    "description": "Check for existence of column(s)",
    "scope": "php",
  },
  "Schema-hasTable.sublime-snippet": {
    "prefix": "Schema::hasTable",
    "body": ["if (Schema::hasTable('${1:table}')) {", "    $0", "}"],
    "description": "Check for existence of table",
    "scope": "php",
  },
  "Schema-rename-table.sublime-snippet": {
    "prefix": "Schema::rename-table",
    "body": ["Schema::rename(${1:\\$from}, ${2:\\$to});$0"],
    "description": "Rename an existing database table",
    "scope": "php",
  },
  "Schema-table-update.sublime-snippet": {
    "prefix": "Schema::table-update",
    "body": [
      "Schema::table('${1:users}', function (Blueprint \\$table) {",
      "    $0",
      "});",
    ],
    "description": "Update an existing table",
    "scope": "php",
  },
  "table-bigIncrements.sublime-snippet": {
    "prefix": "Column::bigIncrements",
    "body": ["\\$table->bigIncrements('${1:id}');$2"],
    "description": "Incrementing ID using a \"big integer\" equivalent.",
    "scope": "php",
  },
  "table-bigInteger.sublime-snippet": {
    "prefix": "Column::bigInteger",
    "body": [
      "\\$table->bigInteger('${1:votes}')${2:->nullable()}${3:->default(${4:12})};$0",
    ],
    "description": "BIGINT equivalent to the table",
    "scope": "php",
  },
  "table-binary.sublime-snippet": {
    "prefix": "Column::binary",
    "body": [
      "\\$table->binary('${1:data}')${2:->nullable()}${3:->default(${4:12})};$0",
    ],
    "description": "BLOB equivalent to the table",
    "scope": "php",
  },
  "table-boolean.sublime-snippet": {
    "prefix": "Column::boolean",
    "body": [
      "\\$table->boolean('${1:confirmed}')${2:->nullable()}${3:->default(${4:false})};$0",
    ],
    "description": "BOOLEAN equivalent to the table",
    "scope": "php",
  },
  "table-char.sublime-snippet": {
    "prefix": "Column::char",
    "body": [
      "\\$table->char('${1:name}', ${2:4})${2:->nullable()}${3:->default(${4:'text'})};$0",
    ],
    "description": "CHAR equivalent with a length (optional)",
    "scope": "php",
  },
  "table-date.sublime-snippet": {
    "prefix": "Column::date",
    "body": [
      "\\$table->date('${1:created_at}')${2:->nullable()}${3:->default(${4:new DateTime()})};$0",
    ],
    "description": "DATE equivalent to the table",
    "scope": "php",
  },
  "table-dateTime.sublime-snippet": {
    "prefix": "Column::dateTime",
    "body": [
      "\\$table->dateTime('${1:created_at}')${2:->nullable()}${3:->default(${4:new DateTime()})};$0",
    ],
    "description": "DATETIME equivalent to the table",
    "scope": "php",
  },
  "table-decimal.sublime-snippet": {
    "prefix": "Column::decimal",
    "body": [
      "\\$table->decimal('${1:amount}', ${2:5}, ${3:2})${4:->nullable()}${5:->default(${6:123.45})};$0",
    ],
    "description": "DECIMAL equivalent with a precision and scale",
    "scope": "php",
  },
  "table-double.sublime-snippet": {
    "prefix": "Column::double",
    "body": [
      "\\$table->double('${1:column}', ${2:15}, ${3:8})${4:->nullable()}${5:->default(${6:123.4567})};$0",
    ],
    "description": "DOUBLE equivalent with precision",
    "scope": "php",
  },
  "table-dropColumn.sublime-snippet": {
    "prefix": "Column::dropColumn",
    "body": ["\\$table->dropColumn('${1:column}');$0"],
    "description": "Drop a column",
    "scope": "php",
  },
  "table-dropForeign.sublime-snippet": {
    "prefix": "Column::dropForeign",
    "body": ["\\$table->dropForeign('${1:posts_user_id_foreign}');$0"],
    "description": "Drop a Foreign Key",
    "scope": "php",
  },
  "table-dropIndex.sublime-snippet": {
    "prefix": "Column::dropIndex",
    "body": ["\\$table->dropIndex('${1:geo_state_index}');$0"],
    "description": "Drop a basic Index",
    "scope": "php",
  },
  "table-dropPrimary.sublime-snippet": {
    "prefix": "Column::dropPrimary",
    "body": ["\\$table->dropPrimary('${1:users_id_primary}');$0"],
    "description": "Drop a Primary key",
    "scope": "php",
  },
  "table-dropUnique.sublime-snippet": {
    "prefix": "Column::dropUnique",
    "body": ["\\$table->dropUnique('${1:users_email_unique}');$0"],
    "description": "Drop a Unique Index",
    "scope": "php",
  },
  "table-engine.sublime-snippet": {
    "prefix": "Column::engine",
    "body": ["\\$table->engine = '${1:InnoDB}';$0"],
    "description": "Set the storage engine for a table",
    "scope": "php",
  },
  "table-enum.sublime-snippet": {
    "prefix": "Column::enum",
    "body": [
      "\\$table->enum('${1:choices}', ${2:['foo', 'bar']})${3:->nullable()}${4:->default(${5:['foo', 'bar']})};$0",
    ],
    "description": "ENUM equivalent to the table",
    "scope": "php",
  },
  "table-float.sublime-snippet": {
    "prefix": "Column::float",
    "body": [
      "\\$table->float('${1:amount}')${2:->nullable()}${3:->default(${4:123.45})};$0",
    ],
    "description": "FLOAT equivalent to the table",
    "scope": "php",
  },
  "table-increments.sublime-snippet": {
    "prefix": "Column::increments",
    "body": ["\\$table->increments('${1:id}');$0"],
    "description": "Incrementing ID",
    "scope": "php",
  },
  "table-index-foreign.sublime-snippet": {
    "prefix": "Column::index-foreign",
    "body": [
      "\\$table->foreign('${1:user_id}')->references('${2:id}')->on('${3:users}')${4:->onDelete('${5:cascade}')};$0",
    ],
    "description": "Add a Foreign Key to a table",
    "scope": "php",
  },
  "table-index-index.sublime-snippet": {
    "prefix": "Column::index",
    "body": ["\\$table->index('${1:column}');$0"],
    "description": "Adding a basic index",
    "scope": "php",
  },
  "table-index-primary.sublime-snippet": {
    "prefix": "Column::index-primary",
    "body": ["\\$table->primary('${1:id}');$0"],
    "description": "Add a primary or array of composite keys",
    "scope": "php",
  },
  "table-index-unique.sublime-snippet": {
    "prefix": "Column::index-unique",
    "body": ["\\$table->unique('${1:column}');$0"],
    "description": "Add a unique index",
    "scope": "php",
  },
  "table-integer.sublime-snippet": {
    "prefix": "Column::integer",
    "body": [
      "\\$table->integer('${1:votes}')${2:->unsigned()}${3:->nullable()}${4:->default(${5:12})};$0",
    ],
    "description": "INTEGER equivalent to the table",
    "scope": "php",
  },
  "table-json.sublime-snippet": {
    "prefix": "Column::json",
    "body": ["\\$table->json('${1:column}')${2:->nullable()};$0"],
    "description": "JSON equivalent to the table",
    "scope": "php",
  },
  "table-jsonb.sublime-snippet": {
    "prefix": "Column::jsonb",
    "body": ["\\$table->jsonb('${1:column}')${2:->nullable()};$0"],
    "description": "JSON equivalent to the table",
    "scope": "php",
  },
  "table-longText.sublime-snippet": {
    "prefix": "Column::longText",
    "body": [
      "\\$table->longText('${1:description}')${2:->nullable()}${3:->default(${4:'text'})};$0",
    ],
    "description": "LONGTEXT equivalent to the table",
    "scope": "php",
  },
  "table-mediumText.sublime-snippet": {
    "prefix": "Column::mediumText",
    "body": [
      "\\$table->mediumText('${1:mediumText}')${2:->nullable()}${3:->default(${4:'text'})};$0",
    ],
    "description": "MEDIUMTEXT equivalent to the table",
    "scope": "php",
  },
  "table-morphs.sublime-snippet": {
    "prefix": "Column::morphs",
    "body": ["\\$table->morphs('${1:taggable}');$0"],
    "description": "Adds INTEGER taggable_id and STRING taggable_type",
    "scope": "php",
  },
  "table-rememberToken.sublime-snippet": {
    "prefix": "Column::rememberToken",
    "body": ["\\$table->rememberToken();"],
    "description": "Adds remember_token as VARCHAR(100) NULL",
    "scope": "php",
  },
  "table-renameColumn.sublime-snippet": {
    "prefix": "Column::renameColumn",
    "body": ["\\$table->renameColumn('${1:from}', '${2:to}');$0"],
    "description": "Rename a column",
    "scope": "php",
  },
  "table-smallInteger.sublime-snippet": {
    "prefix": "Column::smallInteger",
    "body": [
      "\\$table->smallInteger('${1:votes}')${2:->nullable()}${3:->default(${4:12})};$0",
    ],
    "description": "SMALLINT equivalent to the table",
    "scope": "php",
  },
  "table-softDeletes.sublime-snippet": {
    "prefix": "Column::softDeletes",
    "body": ["\\$table->softDeletes();"],
    "description": "Adds deleted_at column for soft deletes",
    "scope": "php",
  },
  "table-string.sublime-snippet": {
    "prefix": "Column::string",
    "body": [
      "\\$table->string('${1:name}', ${2:100})${3:->nullable()}${5:->default(${6:'text'})};$0",
    ],
    "description": "VARCHAR equivalent with a length (optional)",
    "scope": "php",
  },
  "table-text.sublime-snippet": {
    "prefix": "Column::text",
    "body": [
      "\\$table->text('${1:description}')${2:->nullable()}${3:->default(${4:'text'})};$0",
    ],
    "description": "TEXT equivalent to the table",
    "scope": "php",
  },
  "table-time.sublime-snippet": {
    "prefix": "Column::time",
    "body": [
      "\\$table->time('${1:sunrise}')${2:->nullable()}${3:->default(${4:new DateTime()})};$0",
    ],
    "description": "TIME equivalent to the table",
    "scope": "php",
  },
  "table-timestamp.sublime-snippet": {
    "prefix": "Column::timestamp",
    "body": [
      "\\$table->timestamp('${1:added_on}')${2:->nullable()}${3:->default(${4:time()})};$0",
    ],
    "description": "TIMESTAMP equivalent to the table",
    "scope": "php",
  },
  "table-timestamps.sublime-snippet": {
    "prefix": "Column::timestamps",
    "body": ["\\$table->timestamps();"],
    "description": "Adds created_at and updated_at columns",
    "scope": "php",
  },
  "table-tinyInteger.sublime-snippet": {
    "prefix": "Column::tinyInteger",
    "body": ["\\$table->tinyInteger('${1:numbers}');$0"],
    "description": "TINYINT equivalent to the table",
    "scope": "php",
  },
  "table-uuid.sublime-snippet": {
    "prefix": "Column::uuid",
    "body": [
      "\\$table->uuid('${1:id}')${2:->nullable()}${3:->default(${4:null})};$0",
    ],
    "description": "UUID equivalent to the table",
    "scope": "php",
  },
  "Session-all.sublime-snippet": {
    "prefix": "Session::all",
    "body": ["\\$request->session()->all();"],
    "description": "Retrieve All Data from the Session",
    "scope": "php",
  },
  "Session-flash.sublime-snippet": {
    "prefix": "Session::flash",
    "body": ["\\$request->session()->flash('${1:key}', ${2:\\$value});$3"],
    "description": "Flash an Item in the Session",
    "scope": "php",
  },
  "Session-flush.sublime-snippet": {
    "prefix": "Session::flush",
    "body": ["\\$request->session()->flush();"],
    "description": "Remove All Items from the Session",
    "scope": "php",
  },
  "Session-forget.sublime-snippet": {
    "prefix": "Session::forget",
    "body": ["\\$request->session()->forget('${1:key}');$2"],
    "description": "Remove an Item from the Session",
    "scope": "php",
  },
  "Session-get.sublime-snippet": {
    "prefix": "Session::get",
    "body": ["\\$request->session()->get('${1:key}', '${2:default}');$3"],
    "description": "Retrieve an Item from the Session or Default Value",
    "scope": "php",
  },
  "Session-has.sublime-snippet": {
    "prefix": "Session::has",
    "body": ["\\$request->session()->has('${1:key}');$2"],
    "description": "Determin if an Item Exists in the Session",
    "scope": "php",
  },
  "Session-keep.sublime-snippet": {
    "prefix": "Session::keep",
    "body": ["\\$request->session()->keep(${1:['key', 'otherkey']});$2"],
    "description": "Reflash Only a Subset of Flash Data",
    "scope": "php",
  },
  "Session-push.sublime-snippet": {
    "prefix": "Session::push",
    "body": [
      "\\$request->session()->push('${1:key.subArray}', '${2:value}');$3",
    ],
    "description": "Push a Value onto an Array Session Value",
    "scope": "php",
  },
  "Session-put.sublime-snippet": {
    "prefix": "Session::put",
    "body": ["\\$request->session()->put('${1:key}', ${2:\\$value});$3"],
    "description": "Store an Item in the Session",
    "scope": "php",
  },
  "Session-reflash.sublime-snippet": {
    "prefix": "Session::reflash",
    "body": ["\\$request->session()->reflash();"],
    "description": "Reflash the Current Flash Data",
    "scope": "php",
  },
  "Session-regenerate.sublime-snippet": {
    "prefix": "Session::regenerate",
    "body": ["\\$request->session()->regenerate();"],
    "description": "Regenerate the Session ID",
    "scope": "php",
  },
  "Storage-allDirectories.sublime-snippet": {
    "prefix": "Storage::allDirectories",
    "body": ["Storage::allDirectories(${1:directory});$2"],
    "description": "Returns an array of all the directories within a given directory and all of its sub-directories",
    "scope": "php",
  },
  "Storage-allFiles.sublime-snippet": {
    "prefix": "Storage::allFiles",
    "body": ["Storage::allFiles(${1:directory});$2"],
    "description": "Returns an array of all of the files in a directory and it's sub-directories",
    "scope": "php",
  },
  "Storage-append.sublime-snippet": {
    "prefix": "Storage::append",
    "body": ["Storage::append(${1:filePath}, ${2:Appended Text});$3"],
    "description": "Insert content at the end of a file",
    "scope": "php",
  },
  "Storage-cleanDirectory.sublime-snippet": {
    "prefix": "Storage::cleanDirectory",
    "body": ["Storage::cleanDirectory(${1:directory});$2"],
    "description": "Empty the specified directory of all files and folders.",
    "scope": "php",
  },
  "Storage-copy.sublime-snippet": {
    "prefix": "Storage::copy",
    "body": ["Storage::copy(${1:path}, ${2:target});$3"],
    "description": "Copy an existing file to another location on the disk",
    "scope": "php",
  },
  "Storage-delete.sublime-snippet": {
    "prefix": "Storage::delete",
    "body": ["Storage::delete(${1:['file', 'otherFile']});$2"],
    "description": "Remove one or multiple files from the disk",
    "scope": "php",
  },
  "Storage-deleteDirectory.sublime-snippet": {
    "prefix": "Storage::deleteDirectory",
    "body": ["Storage::deleteDirectory(${1:directory});$2"],
    "description": "May be used to remove a directory, including all of its files, from the disk",
    "scope": "php",
  },
  "Storage-directories.sublime-snippet": {
    "prefix": "Storage::directories",
    "body": ["Storage::directories(${1:directory});$2"],
    "description": "Returns an array of all the directories within a given directory",
    "scope": "php",
  },
  "Storage-exists.sublime-snippet": {
    "prefix": "Storage::exists",
    "body": ["Storage::exists(${1:filePath});$2"],
    "description": "Determine if a file exists.",
    "scope": "php",
  },
  "Storage-extension.sublime-snippet": {
    "prefix": "Storage::extension",
    "body": ["Storage::extension(${1:filePath});$2"],
    "description": "Extract the file extension from a file path.",
    "scope": "php",
  },
  "Storage-files.sublime-snippet": {
    "prefix": "Storage::files",
    "body": ["Storage::files(${1:directory});$2"],
    "description": "Returns an array of all of the files in a directory",
    "scope": "php",
  },
  "Storage-get.sublime-snippet": {
    "prefix": "Storage::get",
    "body": ["Storage::get(${1:filePath});$2"],
    "description": "Retrieve the contents of a given file",
    "scope": "php",
  },
  "Storage-isDirectory.sublime-snippet": {
    "prefix": "Storage::isDirectory",
    "body": ["Storage::isDirectory(${1:directory});$2"],
    "description": "Determine if the given path is a directory.",
    "scope": "php",
  },
  "Storage-isFile.sublime-snippet": {
    "prefix": "Storage::isFile",
    "body": ["Storage::isFile(${1:path});$2"],
    "description": "Determine if the given path is a directory.",
    "scope": "php",
  },
  "Storage-isWritable.sublime-snippet": {
    "prefix": "Storage::iswritable",
    "body": ["Storage::isWritable(${1:path});$2"],
    "description": "Determine if the given path is writable.",
    "scope": "php",
  },
  "Storage-lastModified.sublime-snippet": {
    "prefix": "Storage::lastModified",
    "body": ["Storage::lastModified(${1:filePath});$2"],
    "description": "Returns the UNIX timestamp of the last time the file was modified",
    "scope": "php",
  },
  "Storage-makeDirectory.sublime-snippet": {
    "prefix": "Storage::makeDirectory",
    "body": ["Storage::makeDirectory(${1:directory});$2"],
    "description": "Will create the given directory, including any needed sub-directories",
    "scope": "php",
  },
  "Storage-mimeType.sublime-snippet": {
    "prefix": "Storage::mimeType",
    "body": ["Storage::mimeType(${1:path});$2"],
    "description": "Get the mime-type of a given file.",
    "scope": "php",
  },
  "Storage-move.sublime-snippet": {
    "prefix": "Storage::move",
    "body": ["Storage::move(${1:path}, ${2:target});$3"],
    "description": "Move an existing file to a new location on the disk",
    "scope": "php",
  },
  "Storage-name.sublime-snippet": {
    "prefix": "Storage::name",
    "body": ["Storage::name(${1:filePath});$2"],
    "description": "Extract the file name from a file path.",
    "scope": "php",
  },
  "Storage-prepend.sublime-snippet": {
    "prefix": "Storage::prepend",
    "body": ["Storage::prepend(${1:filePath}, ${2:Prepended Text});$3"],
    "description": "Insert content at the beginning of a file",
    "scope": "php",
  },
  "Storage-put.sublime-snippet": {
    "prefix": "Storage::put",
    "body": ["Storage::put(${1:filePath}, ${2:\\$contents});$3"],
    "description": "Store a file on disk",
    "scope": "php",
  },
  "Storage-size.sublime-snippet": {
    "prefix": "Storage::size",
    "body": ["Storage::size(${1:filePath});$2"],
    "description": "Get the size of the file in bytes",
    "scope": "php",
  },
  "Storage-type.sublime-snippet": {
    "prefix": "Storage::type",
    "body": ["Storage::type(${1:filePath});$2"],
    "description": "Get the file type of a given file.",
    "scope": "php",
  },
  "Str-of": {
    "prefix": "Str::of",
    "body": "Str::of(${1:\\$string})",
    "description": "Get a new stringable object from the given string. (v7.x)",
    "scope": "php",
  },
  "Str-after": {
    "prefix": "Str::after",
    "body": "Str::after(${1:\\$subject}, '${2:search}')",
    "description": "The Str::after method returns everything after the given value in a string. The entire string will be returned if the value does not exist within the string.",
    "scope": "php",
  },
  "Str-afterLast": {
    "prefix": "Str::afterLast",
    "body": "Str::afterLast(${1:\\$subject}, '${2:search}')",
    "description": "The Str::afterLast method returns everything after the last occurrence of the given value in a string. The entire string will be returned if the value does not exist within the string. (v6.x)",
    "scope": "php",
  },
  "Str-ascii": {
    "prefix": "Str::ascii",
    "body": "Str::ascii('${1:û}')",
    "description": "The Str::ascii method will attempt to transliterate the string into an ASCII value.",
    "scope": "php",
  },
  "Str-before": {
    "prefix": "Str::before",
    "body": "Str::before(${1:\\$subject}, '${2:search}')",
    "description": "Get the portion of a string before the first occurrence of a given value.",
    "scope": "php",
  },
  "Str-beforeLast": {
    "prefix": "Str::beforeLast",
    "body": "Str::beforeLast(${1:\\$subject}, '${2:search}')",
    "description": "Get the portion of a string before the last occurrence of a given value. (v6.x)",
    "scope": "php",
  },
  "Str-between": {
    "prefix": "Str::between",
    "body": "Str::between(${1:\\$subject}, '${2:from}', '${3:to}')",
    "description": "Get the portion of a string between two given values. (v7.x)",
    "scope": "php",
  },
  "Str-betweenFirst": {
    "prefix": "Str::betweenFirst",
    "body": "Str::betweenFirst(${1:\\$subject}, '${2:from}', '${3:to}')",
    "description": "Get the smallest possible portion of a string between two values. (v9.2)",
    "scope": "php",
  },
  "Str-camel": {
    "prefix": "Str::camel",
    "body": "Str::camel(${1:\\$value})",
    "description": "Convert a value to camel case.",
    "scope": "php",
  },
  "Str-contains": {
    "prefix": "Str::contains",
    "body": "Str::contains(${1:\\$haystack}, '${2:needles}')",
    "description": "Return boolean. Determine if a given string contains a given substring.",
    "scope": "php",
  },
  "Str-containsAll": {
    "prefix": "Str::containsAll",
    "body": "Str::containsAll(${1:\\$haystack}, '${2:needles}')",
    "description": "Determine if a given string contains all array values. (v5.8)",
    "scope": "php",
  },
  "Str-endsWith": {
    "prefix": "Str::endsWith",
    "body": "Str::endsWith(${1:\\$haystack}, '${2:needles}')",
    "description": "Return boolean. Determine if a given string ends with a given substring.",
    "scope": "php",
  },
  "Str-finish": {
    "prefix": "Str::finish",
    "body": "Str::finish(${1:\\$value}, '${2:cap}')",
    "description": "Cap a string with a single instance of a given value.",
    "scope": "php",
  },
  "Str-is": {
    "prefix": "Str::is",
    "body": "Str::is(${1:\\$pattern}, '${2:value}')",
    "description": "Return boolean. Determine if a given string matches a given pattern.",
    "scope": "php",
  },
  "Str-isAscii": {
    "prefix": "Str::isAscii",
    "body": "Str::isAscii(${1:\\$value})",
    "description": "Determine if a given string is 7 bit ASCII. (v7.x)",
    "scope": "php",
  },
  "Str-isUuid": {
    "prefix": "Str::isUuid",
    "body": "Str::isUuid(${1:\\$value})",
    "description": "Return boolean. Determine if a given string is a valid UUID. (v6.x)",
    "scope": "php",
  },
  "Str-kebab": {
    "prefix": "Str::kebab",
    "body": "Str::kebab(${1:\\$value})",
    "description": "Convert a string to kebab case.",
    "scope": "php",
  },
  "Str-lcfirst": {
    "prefix": "Str::lcfirst",
    "body": "Str::lcfirst(${1:\\$value})",
    "description": "Return string with first character lowercase. (v9.4)",
    "scope": "php",
  },
  "Str-length": {
    "prefix": "Str::length",
    "body": "Str::length(${1:\\$value})",
    "description": "Return the length of the given string.",
    "scope": "php",
  },
  "Str-limit": {
    "prefix": "Str::limit",
    "body": "Str::limit(${1:\\$string}, ${2:\\$limit}, '${3:...}')",
    "description": "Truncates the given string at the specified length",
    "scope": "php",
  },
  "Str-lower": {
    "prefix": "Str::lower",
    "body": "Str::lower(${1:\\$value})",
    "description": "Convert the given string to lower-case.",
    "scope": "php",
  },
  "Str-words": {
    "prefix": "Str::words",
    "body": "Str::words(${1:\\$value}, ${2:\\$words}, '${3:...}')",
    "description": "Limit the number of words in a string.",
    "scope": "php",
  },
  "Str-parseCallback": {
    "prefix": "Str::parseCallback",
    "body": "Str::parseCallback('${1:callback}', ${2:\\$default})",
    "description": "Return array. Parse a Class@method style callback into class and method. $default is null or given string.",
    "scope": "php",
  },
  "Str-plural": {
    "prefix": "Str::plural",
    "body": "Str::plural(${1:\\$value}, ${2:\\$count})",
    "description": "Get the plural form of an English word.",
    "scope": "php",
  },
  "Str-pluralStudly": {
    "prefix": "Str::pluralStudly",
    "body": "Str::pluralStudly(${1:\\$value}, ${2:\\$count})",
    "description": "Pluralize the last word of an English, studly caps case string. (v5.8)",
    "scope": "php",
  },
  "Str-random": {
    "prefix": "Str::random",
    "body": "Str::random(${1:\\$length})",
    "description": "Generate a more truly random alpha-numeric string.",
    "scope": "php",
  },
  "Str-replaceArray": {
    "prefix": "Str::replaceArray",
    "body": "Str::replaceArray('${1:search}', '${2:replace}', ${3:\\$subject})",
    "description": "Replace a given value in the string sequentially with an array.",
    "scope": "php",
  },
  "Str-replaceFirst": {
    "prefix": "Str::replaceFirst",
    "body": "Str::replaceFirst('${1:search}', '${2:replace}', ${3:\\$subject})",
    "description": "Replace the first occurrence of a given value in the string.",
    "scope": "php",
  },
  "Str-replaceLast": {
    "prefix": "Str::replaceLast",
    "body": "Str::replaceLast('${1:search}', '${2:replace}', ${3:\\$subject})",
    "description": "Replace the last occurrence of a given value in the string.",
    "scope": "php",
  },
  "Str-start": {
    "prefix": "Str::start",
    "body": "Str::start(${1:\\$value}, '${2:prefix}')",
    "description": "Begin a string with a single instance of a given value.",
    "scope": "php",
  },
  "Str-upper": {
    "prefix": "Str::upper",
    "body": "Str::upper(${1:\\$value})",
    "description": "Convert the given string to upper-case.",
    "scope": "php",
  },
  "Str-title": {
    "prefix": "Str::title",
    "body": "Str::title(${1:\\$value})",
    "description": "Convert the given string to title case.",
    "scope": "php",
  },
  "Str-singular": {
    "prefix": "Str::singular",
    "body": "Str::singular(${1:\\$value})",
    "description": "Get the singular form of an English word.",
    "scope": "php",
  },
  "Str-slug": {
    "prefix": "Str::slug",
    "body": "Str::slug(${1:\\$title})",
    "description": "Generate a URL friendly slug from a given string.",
    "scope": "php",
  },
  "Str-snake": {
    "prefix": "Str::snake",
    "body": "Str::snake(${1:\\$value})",
    "description": "Convert a string to snake case.",
    "scope": "php",
  },
  "Str-startsWith": {
    "prefix": "Str::startsWith",
    "body": "Str::startsWith(${1:\\$haystack}, '${2:needles}')",
    "description": "Return boolean. Determine if a given string starts with a given substring.",
    "scope": "php",
  },
  "Str-studly": {
    "prefix": "Str::studly",
    "body": "Str::studly(${1:\\$value})",
    "description": "Convert a value to studly caps case.",
    "scope": "php",
  },
  "Str-substr": {
    "prefix": "Str::substr",
    "body": "Str::substr(${1:\\$string}, ${2:\\$start}, ${3:\\$length})",
    "description": "Returns the portion of string specified by the start and length parameters.",
    "scope": "php",
  },
  "Str-substrCount": {
    "prefix": "Str::substrCount",
    "body": "Str::substrCount(${1:\\$haystack}, ${2:\\$needle}, ${3:\\$offset}, ${4:\\$length})",
    "description": "Returns the number of substring occurrences. (v7.x)",
    "scope": "php",
  },
  "Str-ucfirst": {
    "prefix": "Str::ucfirst",
    "body": "Str::ucfirst(${1:\\$string})",
    "description": "Make a string's first character uppercase.",
    "scope": "php",
  },
  "Str-uuid": {
    "prefix": "Str::uuid",
    "body": "Str::uuid()",
    "description": "Generate a UUID (version 4).",
    "scope": "php",
  },
  "Str-orderedUuid": {
    "prefix": "Str::orderedUuid",
    "body": "Str::orderedUuid()",
    "description": "Generate a time-ordered UUID (version 4).",
    "scope": "php",
  },
  "Str-createUuidsUsing": {
    "prefix": "Str::createUuidsUsing",
    "body": "Str::createUuidsUsing(${1:callable})",
    "description": "void. Set the callable that will be used to generate UUIDs. (v6.x)",
    "scope": "php",
  },
  "Str-createUuidsNormally": {
    "prefix": "Str::createUuidsNormally",
    "body": "Str::createUuidsNormally()",
    "description": "void. Indicate that UUIDs should be created normally and not using a custom factory. (v6.x)",
    "scope": "php",
  },
  "Str-wrap": {
    "prefix": "Str::wrap",
    "body": "Str::wrap(${1:\\$value}, ${2:\\$prefix}, ${3:\\$suffix})",
    "description": "Wrap the given string in a HTML tag. (v9.5)",
    "scope": "php",
  },
  "View-composer.sublime-snippet": {
    "prefix": "View::composer",
    "body": [
      "view()->composer('${1:name}', function (${2:\\$view}) {",
      "    $3",
      "});",
    ],
    "description": "Define a View Composer",
    "scope": "php",
  },
  "View-composerClass.sublime-snippet": {
    "prefix": "View::composerClass",
    "body": [
      "view()->composer('${1:name}', '${2:App\\Http\\ViewComposers\\SomeComposer}');$3",
    ],
    "description": "Define a Class-based View Composer",
    "scope": "php",
  },
  "View-exists.sublime-snippet": {
    "prefix": "View::exists",
    "body": ["if (view()->exists('${1:view.name}'))", "{", "    $2", "}"],
    "description": "Determine if a view exists",
    "scope": "php",
  },
  "View-make.sublime-snippet": {
    "prefix": "View::make",
    "body": ["view('${1:view.name}', ${2:\\$data});$3"],
    "description": "Create a View with Data",
    "scope": "php",
  },
  "View-makeCompact.sublime-snippet": {
    "prefix": "View::makeCompact",
    "body": ["view('${1:view.name}', compact('${2:data}'));$3"],
    "description": "Create a View, Pass Data with compact()",
    "scope": "php",
  },
  "View-makeWith.sublime-snippet": {
    "prefix": "View::makeWith",
    "body": ["view(${1:'view.name'})->with('${2:key}', ${3:\\$value});$4"],
    "description": "Create a View, Pass Data using with()",
    "scope": "php",
  },
  "View-render.sublime-snippet": {
    "prefix": "View::render",
    "body": ["view(${1:'name'}, ${2:\\$data})->render();$3"],
    "description": "Render a view with some data",
    "scope": "php",
  },
  "View-share.sublime-snippet": {
    "prefix": "View::share",
    "body": ["view()->share('${1:key}', ${2:\\$value});$3"],
    "description": "Share Data across all Views",
    "scope": "php",
  },
}
