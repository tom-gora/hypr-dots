{
  "Blade-component": {
    "prefix": "Blade::component",
    "body": "Blade::component('${1:package-name}', ${2:PackageNameComponent}::class);",
    "description": "Registering Package Components (AppServiceProvider boot method)",
    "scope": "blade"
  },
  "Blade-include": {
    "prefix": "Blade::include",
    "body": "Blade::include('${1:includes.input}', '${2:input}');",
    "description": "Aliasing Includes (AppServiceProvider boot method)",
    "scope": "blade"
  },
  "Blade-if": {
    "prefix": "Blade::if",
    "body": [
      "Blade::if('${1:env}', function ($${2:environment}) {",
      "    ${3:return app()->environment($$environment);}",
      "});"
    ],
    "description": "Custom If Statements (AppServiceProvider boot method)",
    "scope": "blade"
  },
  "Blade-directive": {
    "prefix": "Blade::directive",
    "body": [
      "Blade::directive('${1:datetime}', function ($${2:expression}) {",
      "    ${3:return \"<?php echo ($$expression)->format('m/d/Y H:i'); ?>\";}",
      "});"
    ],
    "description": "Custom directive (AppServiceProvider boot method)",
    "scope": "blade"
  },
  "Blade-stringable": {
    "prefix": "Blade::stringable",
    "body": [
      "Blade::stringable(function (${1:Money} $${2:money}) {",
      "    ${3:return $$money->formatTo('en_GB');}",
      "});"
    ],
    "description": "Custom echo handlers (AppServiceProvider boot method)",
    "scope": "blade"
  },
  "Blade-render": {
    "prefix": "Blade::render",
    "body": "Blade::render(${1:'Blade template string'}, ${2:\\$data});",
    "description": "Transform a raw Blade template string into valid HTML (Laravel 9.x)",
    "scope": "blade"
  },
  "Blade-renderComponent": {
    "prefix": "Blade::renderComponent",
    "body": "Blade::renderComponent(new ${1:HelloComponent}(${2:\\$params}));",
    "description": "Render a given class component by passing the component instance to the method  (Laravel 9.x)",
    "scope": "blade"
  },
  "Path-elixir": {
    "prefix": "lv:elixir",
    "body": "{{ elixir('${1:file}') }}",
    "description": "(deprecated) elixir path",
    "scope": "blade"
  },
  "Path-mix": {
    "prefix": "lv:mix",
    "body": "{{ mix('${1:file}') }}",
    "description": "mix path",
    "scope": "blade"
  },
  "String-trans": {
    "prefix": "lv:trans",
    "body": "{{ trans('$1') }}",
    "description": "trans",
    "scope": "blade"
  },
  "URL-action": {
    "prefix": "lv:action",
    "body": "{{ action('${1:ControllerName}', [${2:'id'=>1}]) }}",
    "description": "URL-action",
    "scope": "blade"
  },
  "URL-secure-asset": {
    "prefix": "lv:secure-asset",
    "body": "{{ secure_asset('$1', ${2:\\$title}, ${3:\\$attributes=[]}) }}",
    "description": "URL-secure-asset",
    "scope": "blade"
  },
  "URL-url": {
    "prefix": "lv:url",
    "body": "{{ url('${1:url}', [$2]) }}",
    "description": "URL-url",
    "scope": "blade"
  },
  "URL-asset": {
    "prefix": "lv:asset",
    "body": "{{ asset('$1') }}",
    "description": "URL-asset",
    "scope": "blade"
  },
  "URL-route": {
    "prefix": "lv:route",
    "body": "{{ route('${1:routeName}', [${2:'id'=>1}]) }}",
    "description": "URL-route",
    "scope": "blade"
  },
  "Form-csrf-field": {
    "prefix": "lv:csrf-field",
    "body": "{{ csrf_field() }}",
    "description": "CSRF hidden field",
    "scope": "blade"
  },
  "csrf-token": {
    "prefix": "lv:csrf-token",
    "body": "{{ csrf_token() }}",
    "description": "CSRF token",
    "scope": "blade"
  },
  "Paginate-links": {
    "prefix": "lv:pagination-links",
    "body": "{{ \\$${1:collection}->links() }}",
    "description": "pagination links",
    "scope": "blade"
  },
  "livewireStyles": {
    "prefix": "livewire:styles",
    "body": "@livewireStyles",
    "description": "Livewire Styles directive",
    "scope": "blade"
  },
  "livewireScripts": {
    "prefix": "livewire:scripts",
    "body": "@livewireScripts",
    "description": "Livewire Scripts directive",
    "scope": "blade"
  },
  "livewire-component": {
    "prefix": "livewire:component",
    "body": "@livewire('${1:component}', ['${2:user}' => \\$${3:user}]${4:, key(\\$$3->id)})",
    "description": "Livewire nesting components",
    "scope": "blade"
  },
  "Extend layout": {
    "prefix": "b:extends",
    "body": "@extends('${1:name}')",
    "description": "extends view layout",
    "scope": "blade"
  },
  "Yield content": {
    "prefix": "b:yield",
    "body": "@yield('${1:name}')",
    "description": "yield content section",
    "scope": "blade"
  },
  "Content Section": {
    "prefix": "b:section",
    "body": [
      "@section('${1:name}')",
      "    $2",
      "@endsection"
    ],
    "description": "content section",
    "scope": "blade"
  },
  "Content Section Show": {
    "prefix": "b:section-show",
    "body": [
      "@section('$1')",
      "    $2",
      "@show"
    ],
    "description": "content section show",
    "scope": "blade"
  },
  "Include view": {
    "prefix": "b:include",
    "body": "@include('${1:name}')",
    "description": "include view",
    "scope": "blade"
  },
  "If-block": {
    "prefix": "b:if",
    "body": [
      "@if ($1)",
      "    $2",
      "@endif"
    ],
    "description": "@if block",
    "scope": "blade"
  },
  "If-else-block": {
    "prefix": "b:if-else",
    "body": [
      "@if ($1)",
      "    $2",
      "@else",
      "    $3",
      "@endif"
    ],
    "description": "if-else block",
    "scope": "blade"
  },
  "Has Section": {
    "prefix": "b:has-section",
    "body": [
      "@hasSection ('${1:name}')",
      "    $2",
      "@else",
      "    $3",
      "@endif"
    ],
    "description": "@hasSection condition",
    "scope": "blade"
  },
  "Unless-block": {
    "prefix": "b:unless",
    "body": [
      "@unless ($1)",
      "    $2",
      "@endunless"
    ],
    "description": "@unless block",
    "scope": "blade"
  },
  "For-block": {
    "prefix": "b:for",
    "body": [
      "@for (\\$i = ${1:0}; \\$i < ${2:\\$count}; \\$i++)",
      "    $3",
      "@endfor"
    ],
    "description": "@for block",
    "scope": "blade"
  },
  "Foreach-block": {
    "prefix": "b:foreach",
    "body": [
      "@foreach (${1:\\$collection} as ${2:\\$item})",
      "    $3",
      "@endforeach"
    ],
    "description": "@foreach block",
    "scope": "blade"
  },
  "forelse-block": {
    "prefix": "b:forelse",
    "body": [
      "@forelse (${1:\\$collection} as ${2:\\$item})",
      "    $3",
      "@empty",
      "    $4",
      "@endforelse"
    ],
    "description": "@forelse block",
    "scope": "blade"
  },
  "while-block": {
    "prefix": "b:while",
    "body": [
      "@while ($1)",
      "    $2",
      "@endwhile"
    ],
    "description": "@while block",
    "scope": "blade"
  },
  "each loop": {
    "prefix": "b:each",
    "body": "@each('${1:view.name}', ${2:\\$collection}, '${3:variable}', '${4:view.empty}')",
    "description": "@each loop",
    "scope": "blade"
  },
  "blade comment": {
    "prefix": "b:comment",
    "body": "{{-- ${1:comment} --}}",
    "description": "comment block",
    "scope": "blade"
  },
  "blade echo-data": {
    "prefix": "b:echo",
    "body": "{{ ${1:\\$data} }}",
    "description": "echo data",
    "scope": "blade"
  },
  "blade echo-unescaped-data": {
    "prefix": "b:echo-html",
    "body": "{!! ${1:\\$html_data} !!}",
    "description": "echo unescaped data (allow html outputs)",
    "scope": "blade"
  },
  "blade echo-untouch": {
    "prefix": "b:echo-raw",
    "body": "@{{ ${1:variable} }}",
    "description": "echo untouched data (allow javascript expression)",
    "scope": "blade"
  },
  "blade verbatim": {
    "prefix": "b:verbatim",
    "body": [
      "@verbatim",
      "{{ ${1:variable} }}",
      "@endverbatim"
    ],
    "description": "displaying JavaScript variables in a large portion of your template",
    "scope": "blade"
  },
  "Push stack": {
    "prefix": "b:push",
    "body": [
      "@push('${1:name}')",
      "    $2",
      "@endpush"
    ],
    "description": "@push stack",
    "scope": "blade"
  },
  "Stack": {
    "prefix": "b:stack",
    "body": "@stack('${1:name}')",
    "description": "@stack",
    "scope": "blade"
  },
  "inject service": {
    "prefix": "b:inject",
    "body": "@inject('${1:name}', '${2:class}')",
    "description": "@inject Service",
    "scope": "blade"
  },
  "can": {
    "prefix": "b:can",
    "body": [
      "@can('${1:update}', ${2:\\$post})",
      "    $3",
      "@endcan"
    ],
    "description": "display a portion of the page only if the user is authorized to perform a given action.",
    "scope": "blade"
  },
  "can-elsecan": {
    "prefix": "b:can-elsecan",
    "body": [
      "@can('${1:update}', ${2:\\$post})",
      "    $3",
      "@elsecan('create', App\\Models\\\\${4:Post}::class)",
      "    $5",
      "@endcan"
    ],
    "description": "display a portion of the page only if the user is authorized to perform a given action.",
    "scope": "blade"
  },
  "canany": {
    "prefix": "b:canany",
    "body": [
      "@canany(['update', 'view', 'delete'], ${1:\\$post})",
      "    $2",
      "@endcanany"
    ],
    "description": "display a portion of the page only if the user is authorized to perform a given action.",
    "scope": "blade"
  },
  "canany-elsecanany": {
    "prefix": "b:canany-elsecanany",
    "body": [
      "@canany(['update', 'view', 'delete'], ${1:\\$post})",
      "    $2",
      "@elsecanany(['create'], App\\Models\\\\${3:Post}::class)",
      "    $4",
      "@endcanany"
    ],
    "description": "display a portion of the page only if the user is authorized to perform a given action.",
    "scope": "blade"
  },
  "cannot": {
    "prefix": "b:cannot",
    "body": [
      "@cannot('${1:update}', ${2:\\$post})",
      "    $3",
      "@endcannot"
    ],
    "description": "display a portion of the page only if the user is authorized to perform a given action.",
    "scope": "blade"
  },
  "cannot-elsecannot": {
    "prefix": "b:cannot-elsecannot",
    "body": [
      "@cannot('${1:update}', ${2:\\$post})",
      "    $3",
      "@elsecannot('create', App\\Models\\\\${5:Post}::class)",
      "    $6",
      "@endcannot"
    ],
    "description": "display a portion of the page only if the user is authorized to perform a given action.",
    "scope": "blade"
  },
  "loop": {
    "prefix": "b:loop",
    "body": [
      "\\$loop->${1:first}"
    ],
    "description": "$loop->(index|remaining|count|first|last|depth|parent)",
    "scope": "blade"
  },
  "loop first": {
    "prefix": "b:loop-first",
    "body": [
      "@if (\\$loop->first)",
      "    ${1:{{-- This is the first iteration --\\}\\}}",
      "@endif"
    ],
    "description": "$loop->first",
    "scope": "blade"
  },
  "loop last": {
    "prefix": "b:loop-last",
    "body": [
      "@if (\\$loop->last)",
      "    ${1:{{-- This is the last iteration --\\}\\}}",
      "@endif"
    ],
    "description": "$loop->last",
    "scope": "blade"
  },
  "php": {
    "prefix": "b:php",
    "body": [
      "@php",
      "    $1",
      "@endphp"
    ],
    "description": "@php block code in view",
    "scope": "blade"
  },
  "includeIf": {
    "prefix": "b:includeIf",
    "body": "@includeIf('${1:view.name}'${2:, ['some' => 'data']})",
    "description": "include a view that may or may not be present, you should use the @includeIf directive",
    "scope": "blade"
  },
  "component": {
    "prefix": "b:component",
    "body": [
      "@component('$1')",
      "    $2",
      "@endcomponent"
    ],
    "description": "component",
    "scope": "blade"
  },
  "slot": {
    "prefix": "b:slot",
    "body": [
      "@slot('$1')",
      "    $2",
      "@endslot"
    ],
    "description": "slot",
    "scope": "blade"
  },
  "isset": {
    "prefix": "b:isset",
    "body": [
      "@isset(${1:\\$record})",
      "    $2",
      "@endisset"
    ],
    "description": "isset",
    "scope": "blade"
  },
  "empty": {
    "prefix": "b:empty",
    "body": [
      "@empty(${1:\\$record})",
      "    $2",
      "@endempty"
    ],
    "description": "empty",
    "scope": "blade"
  },
  "error": {
    "prefix": "b:error",
    "body": [
      "@error('${1:record}')",
      "    $2",
      "@enderror"
    ],
    "description": "error",
    "scope": "blade"
  },
  "includeWhen": {
    "prefix": "b:includeWhen",
    "body": "@includeWhen(${1:\\$boolean}, '${2:view.name}', [${3:'some' => 'data'}])",
    "description": "includeWhen",
    "scope": "blade"
  },
  "auth": {
    "prefix": "b:auth",
    "body": [
      "@auth",
      "    $1",
      "@endauth"
    ],
    "description": "auth",
    "scope": "blade"
  },
  "guest": {
    "prefix": "b:guest",
    "body": [
      "@guest",
      "    $1",
      "@endguest"
    ],
    "description": "guest",
    "scope": "blade"
  },
  "switch": {
    "prefix": "b:switch",
    "body": [
      "@switch(${1:\\$type})",
      "    @case(${2:1})",
      "        $3",
      "        @break",
      "    @case(${4:2})",
      "        $5",
      "        @break",
      "    @default",
      "        $6",
      "@endswitch"
    ],
    "description": "switch",
    "scope": "blade"
  },
  "includeFirst": {
    "prefix": "b:includeFirst",
    "body": "@includeFirst(['${1:view.name}', '${2:variable}'], [${3:'some' => 'data'}])",
    "description": "includeFirst",
    "scope": "blade"
  },
  "csrf": {
    "prefix": "b:csrf",
    "body": "@csrf",
    "description": "form csrf field",
    "scope": "blade"
  },
  "method": {
    "prefix": "b:method",
    "body": "@method($1)",
    "description": "form method field",
    "scope": "blade"
  },
  "dump": {
    "prefix": "b:dump",
    "body": "@dump($1)",
    "description": "dump",
    "scope": "blade"
  },
  "dd": {
    "prefix": "b:dd",
    "body": "@dd($1)",
    "description": "dump and die",
    "scope": "blade"
  },
  "lang": {
    "prefix": "b:lang",
    "body": "@lang('${1:messages.welcome}')",
    "description": "lang",
    "scope": "blade"
  },
  "includeUnless": {
    "prefix": "b:includeUnless",
    "body": "@includeUnless(${1:\\$boolean}, '${2:view.name}', [${3:'some' => 'data'}])",
    "description": "includeUnless",
    "scope": "blade"
  },
  "props": {
    "prefix": "b:props",
    "body": "@props(['${1:propName}'])",
    "description": "Blade component data properties",
    "scope": "blade"
  },
  "env": {
    "prefix": "b:env",
    "body": [
      "@env('${1:staging}')",
      "    $2",
      "@endenv"
    ],
    "description": "env",
    "scope": "blade"
  },
  "production": {
    "prefix": "b:production",
    "body": [
      "@production",
      "    $1",
      "@endproduction"
    ],
    "description": "production",
    "scope": "blade"
  },
  "once": {
    "prefix": "b:once",
    "body": [
      "@once",
      "    $1",
      "@endonce"
    ],
    "description": "define a portion of template that will only be evaluated once per rendering cycle",
    "scope": "blade"
  },
  "aware": {
    "prefix": "b:aware",
    "body": "@aware(['${1:propName}'])",
    "description": "Accessing data from a parent component (Laravel 8.64)",
    "scope": "blade"
  },
  "js": {
    "prefix": "b:js",
    "body": "@js(${1:\\$data})",
    "description": "This directive is useful to properly escape JSON within HTML quotes",
    "scope": "blade"
  },
  "class": {
    "prefix": "b:class",
    "body": "@class(['${1:p-4}', ${2:'font-bold' => true}])",
    "description": "conditionally compiles a CSS class string. (Laravel 8.51)",
    "scope": "blade"
  },
  "checked": {
    "prefix": "b:checked",
    "body": "@checked(${1:true})",
    "description": "This directive will echo checked if the provided condition evaluates to true (Laravel 9.x)",
    "scope": "blade"
  },
  "selected": {
    "prefix": "b:selected",
    "body": "@selected(${1:true})",
    "description": "The @selected directive may be used to indicate if a given select option should be \"selected\" (Laravel 9.x)",
    "scope": "blade"
  },
  "disabled": {
    "prefix": "b:disabled",
    "body": "@disabled(${1:true})",
    "description": "The @disabled directive may be used to indicate if a given element should be \"disabled\" (Laravel 9.x)",
    "scope": "blade"
  },
  "style": {
    "prefix": "b:style",
    "body": "@style($1)",
    "description": "The @style directive may be used to conditionally add inline CSS styles to an HTML element (Laravel 9.x)",
    "scope": "blade"
  },
  "readonly": {
    "prefix": "b:readonly",
    "body": "@readonly(${1:true})",
    "description": "The @readonly directive may be used to indicate if a given element should be \"readonly\" (Laravel 9.x)",
    "scope": "blade"
  },
  "required": {
    "prefix": "b:required",
    "body": "@required(${1:true})",
    "description": "The @required directive may be used to indicate if a given element should be \"required\" (Laravel 9.x)",
    "scope": "blade"
  },
  "pushOnce": {
    "prefix": "b:pushOnce",
    "body": [
      "@pushOnce('${1:scripts}')",
      "    $2",
      "@endPushOnce"
    ],
    "description": "Combine @once and @push for convenience (Laravel 9.x)",
    "scope": "blade"
  },
  "pushIf": {
    "prefix": "b:pushIf",
    "body": [
      "@pushIf(${1:\\$condition}, '${2:scripts}')",
      "    $3",
      "@endPushIf"
    ],
    "description": "Combine @if and @push for convenience",
    "scope": "blade"
  },
  "prepend": {
    "prefix": "b:prepend",
    "body": [
      "@prepend('${1:scripts}')",
      "    $2",
      "@endprepend"
    ],
    "description": "prepend content to a stack",
    "scope": "blade"
  },
  "prependOnce": {
    "prefix": "b:prependOnce",
    "body": [
      "@prependOnce('${1:scripts}')",
      "    $2",
      "@endPrependOnce"
    ],
    "description": "Combine @once and @prepend for convenience (Laravel 9.x)",
    "scope": "blade"
  },
  "session": {
    "prefix": "b:session",
    "body": [
      "@session('${1:status}')",
      "    $2",
      "@endsession"
    ],
    "description": "The @session directive may be used to determine if a session value exists (Laravel 10.x)",
    "scope": "blade"
  }
}
