local THEME = {}
local hl = vim.api.nvim_set_hl

THEME.setup = function(theme_name)
	local ok, palette_or_err = pcall(require, "tomeczku.core.theme.palettes." .. theme_name)

	if not ok then
		vim.notify(
			"Failed to load theme palette '" .. theme_name .. "': " .. tostring(palette_or_err),
			vim.log.levels.ERROR,
			{ timeout = 3000 }
		)
		return
	end

	local p = palette_or_err
	if type(p) ~= "table" or not p.white or not p.black or not p.yellow or not p.purple then
		vim.notify("Invalid theme palette format for '" .. theme_name .. "'", vim.log.levels.ERROR, { timeout = 3000 })
		return
	end

	hl(0, "Normal", { fg = p.white.base, bg = p.black.base })
	hl(0, "SignColumn", { fg = p.white.darker, bg = "NONE", sp = "NONE" })
	hl(0, "MsgArea", { fg = p.white.base, bg = p.black.base })
	hl(0, "ModeMsg", { fg = p.cyan.base, bg = "NONE" })
	hl(0, "MsgSeparator", { fg = p.white.base, bg = p.black.base })
	hl(0, "SpellBad", { fg = "NONE", bg = "NONE", sp = p.red.base, undercurl = true })
	hl(0, "SpellCap", { fg = "NONE", bg = "NONE", sp = p.purple.base, undercurl = true })
	hl(0, "SpellLocal", { fg = "NONE", bg = "NONE", sp = p.blue.base, undercurl = true })
	hl(0, "SpellRare", { fg = "NONE", bg = "NONE", sp = p.purple.base, undercurl = true })
	hl(0, "NormalNC", { fg = p.white.base, bg = p.black.base })
	hl(0, "Pmenu", { fg = "NONE", bg = p.black.light })
	hl(0, "PmenuSel", { fg = p.black.base, bg = p.purple.base })
	hl(0, "WildMenu", { fg = p.red.base, bg = p.pink.light })
	hl(0, "CursorLineNr", { fg = p.white.base, bg = "NONE" })
	hl(0, "Comment", { fg = p.black.muted_base, bg = "NONE", italic = true })
	hl(0, "Folded", { fg = p.white.darker, bg = p.black.light })
	hl(0, "FoldColumn", { fg = p.blue.base, bg = p.black.light })
	hl(0, "LineNr", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "FloatBorder", { fg = p.cyan.base, bg = p.black.darker })
	hl(0, "VertSplit", { fg = p.black.muted_dark, bg = "NONE" })
	hl(0, "CursorLine", { fg = "NONE", bg = p.black.base_off })
	hl(0, "CursorColumn", { fg = "NONE", bg = p.black.dark })
	hl(0, "ColorColumn", { fg = "NONE", bg = p.black.dark })
	hl(0, "NormalFloat", { fg = "NONE", bg = p.black.darker })
	hl(0, "Visual", { fg = "NONE", bg = p.black.lighter })
	hl(0, "VisualNOS", { fg = p.red.base, bg = "NONE" })
	hl(0, "WarningMsg", { fg = p.red.base, bg = "NONE" })
	hl(0, "DiffAdd", { fg = p.green.base, bg = "NONE" })
	hl(0, "DiffChange", { fg = p.blue.light, bg = "NONE" })
	hl(0, "DiffDelete", { fg = p.red.base, bg = "NONE" })
	hl(0, "QuickFixLine", { fg = "NONE", bg = p.black.light, sp = "NONE" })
	hl(0, "PmenuSbar", { fg = "NONE", bg = p.black.light })
	hl(0, "PmenuThumb", { fg = "NONE", bg = p.black.muted_darker })
	hl(0, "MatchWord", { fg = p.white.base, bg = p.black.muted_dark })
	hl(0, "MatchParen", { link = "MatchWord" })
	hl(0, "Cursor", { fg = "#000000", bg = p.white.base, force = true })
	hl(0, "Conceal", { fg = "NONE", bg = "NONE" })
	hl(0, "Directory", { fg = p.purple.base, bg = "NONE" })
	hl(0, "SpecialKey", { fg = p.white.darker, bg = "NONE" })
	hl(0, "Title", { fg = p.purple.base, bg = p.black.dark, sp = "NONE" })
	hl(0, "ErrorMsg", { fg = p.red.base, bg = p.black.base })
	hl(0, "Search", { fg = p.black.light, bg = p.pink.light })
	hl(0, "IncSearch", { fg = p.black.light, bg = p.yellow.base })
	hl(0, "Substitute", { fg = p.black.light, bg = p.pink.light, sp = "NONE" })
	hl(0, "MoreMsg", { fg = p.cyan.base, bg = "NONE" })
	hl(0, "Question", { fg = p.purple.base, bg = "NONE" })
	hl(0, "NonText", { fg = p.white.darker, bg = "NONE" })
	hl(0, "Variable", { fg = p.white.base, bg = "NONE" })
	hl(0, "String", { fg = p.cyan.base, bg = "NONE" })
	hl(0, "Character", { fg = p.red.base, bg = "NONE" })
	hl(0, "Constant", { fg = p.red.base, bg = "NONE" })
	hl(0, "LineNumber", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "Boolean", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "Float", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "Identifier", { fg = p.red.base, bg = "NONE", sp = "NONE" })
	hl(0, "Function", { fg = p.purple.base, bg = "NONE" })
	hl(0, "Operator", { fg = p.white.base, bg = "NONE", sp = "NONE" })
	hl(0, "Type", { fg = p.pink.base, bg = "NONE", sp = "NONE" })
	hl(0, "StorageClass", { fg = p.pink.base, bg = "NONE" })
	hl(0, "Structure", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "Typedef", { fg = p.pink.base, bg = "NONE" })
	hl(0, "Keyword", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "Statement", { fg = p.red.base, bg = "NONE" })
	hl(0, "Conditional", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "Repeat", { fg = p.pink.base, bg = "NONE" })
	hl(0, "Label", { fg = p.pink.base, bg = "NONE" })
	hl(0, "Exception", { fg = p.red.base, bg = "NONE" })
	hl(0, "Include", { fg = p.purple.base, bg = "NONE" })
	hl(0, "PreProc", { fg = p.pink.base, bg = "NONE" })
	hl(0, "Define", { fg = p.yellow.base, bg = "NONE", sp = "NONE" })
	hl(0, "Macro", { fg = p.red.base, bg = "NONE" })
	hl(0, "Special", { fg = p.blue.base, bg = "NONE" })
	hl(0, "SpecialChar", { fg = p.black.muted_base, bg = "NONE" })
	hl(0, "Tag", { fg = p.pink.base, bg = "NONE" })
	hl(0, "Debug", { fg = p.red.base, bg = "NONE" })
	hl(0, "Underlined", { fg = p.cyan.base, bg = "NONE" })
	hl(0, "Bold", { fg = "NONE", bg = "NONE", bold = true })
	hl(0, "Italic", { fg = "NONE", bg = "NONE", italic = true })
	hl(0, "Ignore", { fg = p.blue.base, bg = p.black.base, bold = true })
	hl(0, "Todo", { fg = p.pink.base, bg = p.black.light })
	hl(0, "Error", { fg = p.black.base, bg = p.red.base })
	hl(0, "Delimiter", { fg = p.purple.base, bg = p.black.base, sp = "NONE" })
	-- Treesitter
	hl(0, "@annotation", { fg = p.black.muted_base, bg = "NONE" })
	hl(0, "@attribute", { fg = p.pink.base, bg = "NONE" })
	hl(0, "@constructor", { fg = p.blue.base, bg = "NONE" })
	hl(0, "@type.builtin", { fg = p.pink.base, bg = "NONE" })
	hl(0, "@conditional", { link = "Conditional" })
	hl(0, "@exception", { fg = p.red.base, bg = "NONE" })
	hl(0, "@include", { link = "Include" })
	hl(0, "@keyword.return", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "@keyword", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "@keyword.function", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "@namespace", { fg = p.red.base, bg = "NONE" })
	hl(0, "@constant.builtin", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "@float", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "@character", { fg = p.red.base, bg = "NONE" })
	hl(0, "@error", { fg = p.red.base, bg = "NONE" })
	hl(0, "@function", { fg = p.purple.base, bg = "NONE" })
	hl(0, "@function.builtin", { fg = p.purple.base, bg = "NONE" })
	hl(0, "@method", { fg = p.purple.base, bg = "NONE" })
	hl(0, "@constant.macro", { fg = p.red.base, bg = "NONE" })
	hl(0, "@function.macro", { fg = p.red.base, bg = "NONE" })
	hl(0, "@variable", { fg = p.white.base, bg = "NONE" })
	hl(0, "@variable.builtin", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "@property", { fg = p.red.base, bg = "NONE" })
	hl(0, "@field", { fg = p.purple.base, bg = "NONE" })
	hl(0, "@parameter", { fg = p.red.base, bg = "NONE" })
	hl(0, "@parameter.reference", { fg = p.white.base, bg = "NONE" })
	hl(0, "@symbol", { fg = p.cyan.base, bg = "NONE" })
	hl(0, "@text", { fg = p.white.base, bg = "NONE" })
	hl(0, "@punctuation.delimiter", { fg = p.white.dark, bg = "NONE" })
	hl(0, "@tag.delimiter", { fg = p.black.muted_base, bg = "NONE" })
	hl(0, "@tag.attribute", { link = "@Property" })
	hl(0, "@punctuation.bracket", { fg = p.black.muted_base, bg = "NONE" })
	hl(0, "@punctuation.special", { fg = p.red.base, bg = "NONE" })
	hl(0, "@string.regex", { fg = p.blue.base, bg = "NONE" })
	hl(0, "@string.escape", { fg = p.blue.base, bg = "NONE" })
	hl(0, "@emphasis", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "@literal", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "@text.uri", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "@keyword.operator", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "@strong", { fg = "NONE", bg = "NONE", bold = true })
	hl(0, "@scope", { fg = "NONE", bg = "NONE", bold = true })
	hl(0, "TreesitterContext", { link = "CursorLine" })
	-- markdown
	hl(0, "markdownBlockquote", { fg = p.green.base, bg = "NONE" })
	hl(0, "markdownCode", { fg = p.yellow.light, bg = "NONE" })
	hl(0, "markdownCodeBlock", { fg = p.yellow.light, bg = "NONE" })
	hl(0, "markdownCodeDelimiter", { fg = p.yellow.light, bg = "NONE" })
	hl(0, "markdownH1", { fg = p.blue.light, bg = "NONE" })
	hl(0, "markdownH2", { fg = p.blue.light, bg = "NONE" })
	hl(0, "markdownH3", { fg = p.blue.light, bg = "NONE" })
	hl(0, "markdownH4", { fg = p.blue.light, bg = "NONE" })
	hl(0, "markdownH5", { fg = p.blue.light, bg = "NONE" })
	hl(0, "markdownH6", { fg = p.blue.light, bg = "NONE" })
	hl(0, "markdownHeadingDelimiter", { fg = p.blue.light, bg = "NONE" })
	hl(0, "markdownHeadingRule", { fg = p.white.base, bg = "NONE", bold = true })
	hl(0, "markdownId", { fg = p.purple.base, bg = "NONE" })
	hl(0, "markdownIdDeclaration", { fg = p.blue.light, bg = "NONE" })
	hl(0, "markdownIdDelimiter", { fg = p.black.muted_base, bg = "NONE" })
	hl(0, "markdownLinkDelimiter", { fg = p.black.muted_base, bg = "NONE" })
	hl(0, "markdownBold", { fg = p.blue.light, bg = "NONE", bold = true })
	hl(0, "markdownItalic", { fg = "NONE", bg = "NONE", italic = true })
	hl(0, "markdownBoldItalic", { fg = p.yellow.base, bg = "NONE", bold = true, italic = true })
	hl(0, "markdownListMarker", { fg = p.blue.light, bg = "NONE" })
	hl(0, "markdownOrderedListMarker", { fg = p.blue.light, bg = "NONE" })
	hl(0, "markdownRule", { fg = p.black.light, bg = "NONE" })
	hl(0, "markdownUrl", { fg = p.blue.base, bg = "NONE", underline = true })
	hl(0, "markdownLinkText", { fg = p.blue.light, bg = "NONE" })
	hl(0, "markdownFootnote", { fg = p.yellow.light, bg = "NONE" })
	hl(0, "markdownFootnoteDefinition", { fg = p.yellow.light, bg = "NONE" })
	hl(0, "markdownEscape", { fg = p.yellow.base, bg = "NONE" })
	-- Whichkey
	hl(0, "WhichKey", { fg = p.blue.light, bg = "NONE" })
	hl(0, "WhichKeySeperator", { fg = p.black.muted_base, bg = "NONE" })
	hl(0, "WhichKeyDesc", { fg = p.red.base, bg = "NONE" })
	hl(0, "WhichKeyGroup", { fg = p.green.base, bg = "NONE" })
	hl(0, "WhichKeyValue", { fg = p.green.base, bg = "NONE" })
	hl(0, "WhichKeyFloat", { link = "NormalFloat" })
	-- Git
	hl(0, "SignAdd", { fg = p.green.light, bg = "NONE" })
	hl(0, "SignChange", { fg = p.blue.light, bg = "NONE" })
	hl(0, "SignDelete", { fg = p.red.light, bg = "NONE" })
	hl(0, "GitSignsAdd", { fg = p.green.light, bg = "NONE" })
	hl(0, "GitSignsChange", { fg = p.blue.light, bg = "NONE" })
	hl(0, "GitSignsDelete", { fg = p.red.light, bg = "NONE" })
	-- LSP
	hl(0, "DiagnosticError", { fg = p.red.base, bg = "NONE" })
	hl(0, "DiagnosticWarning", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "DiagnosticHint", { fg = p.purple.base, bg = "NONE" })
	hl(0, "DiagnosticWarn", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "DiagnosticInfo", { fg = p.green.base, bg = "NONE" })
	hl(0, "LspDiagnosticsDefaultError", { fg = p.red.base, bg = "NONE" })
	hl(0, "LspDiagnosticsDefaultWarning", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "LspDiagnosticsDefaultInformation", { fg = p.yellow.intense, bg = "NONE" })
	hl(0, "LspDiagnosticsDefaultInfo", { fg = p.yellow.intense, bg = "NONE" })
	hl(0, "LspDiagnosticsDefaultHint", { fg = p.purple.base, bg = "NONE" })
	hl(0, "LspDiagnosticsFloatingError", { fg = p.red.base, bg = "NONE" })
	hl(0, "LspDiagnosticsFloatingWarning", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "LspDiagnosticsFloatingInformation", { fg = p.yellow.intense, bg = "NONE" })
	hl(0, "LspDiagnosticsFloatingInfo", { fg = p.yellow.intense, bg = "NONE" })
	hl(0, "LspDiagnosticsFloatingHint", { fg = p.purple.base, bg = "NONE" })
	hl(0, "DiagnosticSignError", { fg = p.red.base, bg = "NONE" })
	hl(0, "DiagnosticSignWarning", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "DiagnosticSignInformation", { fg = p.yellow.intense, bg = "NONE" })
	hl(0, "DiagnosticSignInfo", { fg = p.yellow.intense, bg = "NONE" })
	hl(0, "DiagnosticSignHint", { fg = p.purple.base, bg = "NONE" })
	hl(0, "LspDiagnosticsSignError", { fg = p.red.base, bg = "NONE" })
	hl(0, "LspDiagnosticsSignWarning", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "LspDiagnosticsSignInformation", { fg = p.yellow.intense, bg = "NONE" })
	hl(0, "LspDiagnosticsSignInfo", { fg = p.yellow.intense, bg = "NONE" })
	hl(0, "LspDiagnosticsSignHint", { fg = p.purple.base, bg = "NONE" })
	hl(0, "LspDiagnosticsError", { fg = p.red.base, bg = "NONE" })
	hl(0, "LspDiagnosticsWarning", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "LspDiagnosticsInformation", { fg = p.yellow.intense, bg = "NONE" })
	hl(0, "LspDiagnosticsInfo", { fg = p.yellow.intense, bg = "NONE" })
	hl(0, "LspDiagnosticsHint", { fg = p.purple.base, bg = "NONE" })
	hl(0, "LspDiagnosticsUnderlineError", { fg = "NONE", bg = "NONE", underline = true })
	hl(0, "LspDiagnosticsUnderlineWarning", { fg = "NONE", bg = "NONE", underline = true })
	hl(0, "LspDiagnosticsUnderlineInformation", { fg = "NONE", bg = "NONE", underline = true })
	hl(0, "LspDiagnosticsUnderlineInfo", { fg = "NONE", bg = "NONE", underline = true })
	hl(0, "LspDiagnosticsUnderlineHint", { fg = "NONE", bg = "NONE", underline = true })
	hl(0, "LspReferenceRead", { fg = "NONE", bg = "#2e303b" })
	hl(0, "LspReferenceText", { fg = "NONE", bg = "#2e303b" })
	hl(0, "LspReferenceWrite", { fg = "NONE", bg = "#2e303b" })
	hl(0, "LspCodeLens", { fg = p.white.dark, bg = "NONE", italic = true })
	hl(0, "LspCodeLensSeparator", { fg = p.white.dark, bg = "NONE", italic = true })

	hl(0, "NotifyBackground", { bg = p.black.dark, force = true })
	local notify_error_hls = {
		"NotifyERRORBorder",
		"NotifyERRORIcon",
		"NotifyERRORBody",
		"NotifyERRORTitle",
	}
	local notify_warn_hls = {
		"NotifyWARNIcon",
		"NotifyWARNBorder",
		"NotifyWARNBody",
		"NotifyWARNTitle",
	}
	local notify_info_hls = {
		"NotifyINFOBorder",
		"NotifyINFOIcon",
		"NotifyINFOBody",
		"NotifyINFOTitle",
	}
	local notify_debug_hls = {
		"NotifyDEBUGTitle",
		"NotifyDEBUGIcon",
		"NotifyDEBUGBorder",
		"NotifyDEBUGBody",
	}
	local notify_trace_hls = {
		"NotifyTRACETitle",
		"NotifyTRACEBody",
		"NotifyTRACEIcon",
		"NotifyTRACEBorder",
	}

	for _, hl_name in ipairs(notify_error_hls) do
		hl(0, hl_name, { fg = p.red.base, bg = p.black.dark, bold = true })
	end
	for _, hl_name in ipairs(notify_warn_hls) do
		hl(0, hl_name, { fg = p.yellow.base, bg = p.black.dark, bold = true })
	end
	for _, hl_name in ipairs(notify_info_hls) do
		hl(0, hl_name, { fg = p.blue.base, bg = p.black.dark, bold = true })
	end
	for _, hl_name in ipairs(notify_debug_hls) do
		hl(0, hl_name, { fg = p.purple.base, bg = p.black.dark, bold = true })
	end
	for _, hl_name in ipairs(notify_trace_hls) do
		hl(0, hl_name, { fg = p.blue.base, bg = p.black.dark, bold = true })
	end

	-- Cmp
	hl(0, "CmpItemAbbrDeprecated", { fg = p.black.muted_dark, bg = "NONE", strikethrough = true })
	hl(0, "CmpItemAbbrMatch", { fg = p.blue.light, bg = "NONE" })
	hl(0, "CmpItemAbbrMatchFuzzy", { fg = p.blue.light, bg = "NONE" })
	hl(0, "CmpItemKindFunction", { fg = p.blue.light, bg = "NONE" })
	hl(0, "CmpItemKindMethod", { fg = p.blue.light, bg = "NONE" })
	hl(0, "CmpItemKindConstructor", { fg = p.blue.base, bg = "NONE" })
	hl(0, "CmpItemKindClass", { fg = p.blue.base, bg = "NONE" })
	hl(0, "CmpItemKindEnum", { fg = p.blue.base, bg = "NONE" })
	hl(0, "CmpItemKindEvent", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "CmpItemKindInterface", { fg = p.blue.base, bg = "NONE" })
	hl(0, "CmpItemKindStruct", { fg = p.blue.base, bg = "NONE" })
	hl(0, "CmpItemKindVariable", { fg = p.red.base, bg = "NONE" })
	hl(0, "CmpItemKindField", { fg = p.red.base, bg = "NONE" })
	hl(0, "CmpItemKindProperty", { fg = p.red.base, bg = "NONE" })
	hl(0, "CmpItemKindEnumMember", { fg = p.yellow.light, bg = "NONE" })
	hl(0, "CmpItemKindConstant", { fg = p.yellow.light, bg = "NONE" })
	hl(0, "CmpItemKindKeyword", { fg = p.purple.base, bg = "NONE" })
	hl(0, "CmpItemKindModule", { fg = p.blue.base, bg = "NONE" })
	hl(0, "CmpItemKindValue", { fg = p.white.base, bg = "NONE" })
	hl(0, "CmpItemKindUnit", { fg = p.white.base, bg = "NONE" })
	hl(0, "CmpItemKindText", { fg = p.white.base, bg = "NONE" })
	hl(0, "CmpItemKindSnippet", { fg = p.yellow.base, bg = "NONE" })
	hl(0, "CmpItemKindFile", { fg = p.white.base, bg = "NONE" })
	hl(0, "CmpItemKindFolder", { fg = p.white.base, bg = "NONE" })
	hl(0, "CmpItemKindColor", { fg = p.white.base, bg = "NONE" })
	hl(0, "CmpItemKindReference", { fg = p.white.base, bg = "NONE" })
	hl(0, "CmpItemKindOperator", { fg = p.white.base, bg = "NONE" })
	hl(0, "CmpItemKindTypeParameter", { fg = p.red.base, bg = "NONE" })

	-- no lazy background
	hl(0, "LazyBackdrop", { bg = "NONE", force = true })
	hl(0, "RainbowDelimiterYellow", { fg = p.yellow.oversaturated, force = true })
	hl(0, "RainbowDelimiterRed", { fg = p.red.oversaturated, force = true })
	hl(0, "RainbowDelimiterOrange", { fg = p.pink.oversaturated, force = true })
	hl(0, "RainbowDelimiterBlue", { fg = p.blue.oversaturated, force = true })
	hl(0, "RainbowDelimiterGreen", { fg = p.green.oversaturated, force = true })
	hl(0, "RainbowDelimiterViolet", { fg = p.purple.oversaturated, force = true })
	hl(0, "RainbowDelimiterCyan", { fg = p.cyan.oversaturated, force = true })
	-- highlights for statusline that I wrote for old nvchad config that I lifted and modified to my needs
	-- my custom hls used in this statusline config:
	hl(0, "St_NormalMode_Root_Sep", { bg = "NONE", fg = p.pink.intense, bold = false })
	hl(0, "St_VisualMode_Root_Sep", { bg = "NONE", fg = p.blue.base, bold = false })
	hl(0, "St_InsertMode_Root_Sep", { bg = p.black.darker, fg = p.purple.intense, bold = false })
	hl(0, "St_ReplaceMode_Root_Sep", { bg = p.black.darker, fg = p.yellow.intense, bold = false })
	hl(0, "St_SelectMode_Root_Sep", { bg = p.black.darker, fg = p.blue.base, bold = false })
	hl(0, "St_CommandMode_Root_Sep", { bg = p.black.darker, fg = p.green.base, bold = false })
	hl(0, "St_ConfirmMode_Root_Sep", { bg = p.black.darker, fg = p.cyan.intense, bold = false })
	hl(0, "St_Root", { bg = p.black.darker, fg = p.white.dark, bold = false })
	hl(0, "St_Root_Sep_Right", { bg = p.black.muted_darker, fg = p.black.darker, bold = false })
	hl(0, "St_NormalModeCustomTxt", { bg = p.pink.intense, fg = p.black.base, bold = true })
	hl(0, "St_VisualModeCustomTxt", { bg = p.blue.base, fg = p.black.base, bold = true })
	hl(0, "St_InsertModeCustomTxt", { bg = p.purple.intense, fg = p.black.base, bold = true })
	hl(0, "St_ReplaceModeCustomTxt", { bg = p.yellow.intense, fg = p.black.base, bold = true })
	hl(0, "St_SelectModeCustomTxt", { bg = p.blue.base, fg = p.black.base, bold = true })
	hl(0, "St_CommandModeCustomTxt", { bg = p.green.base, fg = p.black.base, bold = true })
	hl(0, "St_ConfirmModeCustomTxt", { bg = p.cyan.intense, fg = p.black.base, bold = true })
	-- default hls used by nvchad extracted from that old config and injected into my config
	hl(0, "St_CommandMode", { bg = "NONE", bold = true, fg = p.green.base })
	hl(0, "St_CommandModeCustomTxt", { bg = p.green.base, bold = true, fg = p.black.base })
	hl(0, "St_CommandModeSep", { bg = "NONE", bold = true, fg = p.green.base })
	hl(0, "St_CommandMode_Root_Sep", { bg = p.black.darker, fg = p.green.base })
	hl(0, "St_CommandmodeText", { bg = p.black.muted_darker, bold = true, fg = p.green.base })
	hl(0, "St_ConfirmMode", { bg = "NONE", bold = true, fg = p.cyan.intense })
	hl(0, "St_ConfirmModeCustomTxt", { bg = p.cyan.intense, bold = true, fg = p.black.base })
	hl(0, "St_ConfirmModeSep", { bg = "NONE", bold = true, fg = p.cyan.intense })
	hl(0, "St_ConfirmMode_Root_Sep", { bg = p.black.darker, fg = p.cyan.intense })
	hl(0, "St_ConfirmmodeText", { bg = p.black.muted_darker, bold = true, fg = p.cyan.base })
	hl(0, "St_EmptySpace", { fg = p.black.base })
	hl(0, "St_EmptySpace2", { fg = p.black.base })
	hl(0, "St_InsertMode", { bg = "NONE", bold = true, fg = p.purple.intense })
	hl(0, "St_InsertModeCustomTxt", { bg = p.purple.intense, bold = true, fg = p.black.base })
	hl(0, "St_InsertModeSep", { bg = "NONE", bold = true, fg = p.purple.intense })
	hl(0, "St_InsertMode_Root_Sep", { bg = p.black.darker, fg = p.purple.intense })
	hl(0, "St_InsertmodeText", { bg = p.black.muted_darker, bold = true, fg = p.purple.intense })
	hl(0, "St_LspHints", { fg = p.purple.intense })
	hl(0, "St_LspInfo", { fg = p.green.base })
	hl(0, "St_LspProgress", { fg = p.green.base })
	hl(0, "St_LspStatus_Icon", { bg = p.blue.base, fg = p.black.base })
	hl(0, "St_NTerminalMode", { bg = "NONE", bold = true, fg = p.pink.intense })
	hl(0, "St_NTerminalModeCustomTxt", { bg = p.pink.intense, bold = true, fg = p.black.base })
	hl(0, "St_NTerminalModeSep", { bg = "NONE", bold = true, fg = p.yellow.base })
	hl(0, "St_NTerminalMode_Root_Sep", { bg = "NONE", fg = p.pink.intense })
	hl(0, "St_NTerminalmodeText", { bg = p.black.muted_darker, bold = true, fg = p.yellow.intense })
	hl(0, "St_NormalMode", { bg = "NONE", bold = true, fg = p.pink.intense })
	hl(0, "St_NormalModeCustomTxt", { bg = p.pink.intense, bold = true, fg = p.black.base })
	hl(0, "St_NormalModeSep", { bg = "NONE", bold = true, fg = p.blue.base })
	hl(0, "St_NormalMode_Root_Sep", { bg = p.black.darker, fg = p.pink.intense })
	hl(0, "St_NormalmodeText", { bg = p.black.muted_darker, fg = p.pink.intense })
	hl(0, "St_Pos_bg", { bg = p.yellow.intense, fg = p.black.base })
	hl(0, "St_Pos_sep", { bg = "NONE", fg = p.yellow.intense })
	hl(0, "St_Pos_txt", { bg = p.black.muted_darker, fg = p.yellow.intense })
	hl(0, "St_ReplaceMode", { bg = "NONE", bold = true, fg = p.yellow.intense })
	hl(0, "St_ReplaceModeCustomTxt", { bg = p.yellow.intense, bold = true, fg = p.black.base })
	hl(0, "St_ReplaceModeSep", { bg = "NONE", bold = true, fg = p.yellow.intense })
	hl(0, "St_ReplaceMode_Root_Sep", { bg = p.black.darker, fg = p.yellow.intense })
	hl(0, "St_ReplacemodeText", { bg = p.black.muted_darker, bold = true, fg = p.yellow.intense })
	hl(0, "St_SelectMode", { bg = "NONE", bold = true, fg = p.blue.base })
	hl(0, "St_SelectModeCustomTxt", { bg = p.blue.base, bold = true, fg = p.black.base })
	hl(0, "St_SelectModeSep", { bg = "NONE", bold = true, fg = p.blue.base })
	hl(0, "St_SelectMode_Root_Sep", { bg = p.black.darker, fg = p.blue.base })
	hl(0, "St_SelectmodeText", { bg = p.black.muted_darker, bold = true, fg = p.blue.base })
	hl(0, "St_TerminalMode", { bg = "NONE", bold = true, fg = p.green.base })
	hl(0, "St_TerminalModeCustomTxt", { bg = p.green.base, bold = true, fg = p.black.base })
	hl(0, "St_TerminalModeSep", { bg = "NONE", bold = true, fg = p.green.base })
	hl(0, "St_TerminalMode_Root_Sep", { bg = "NONE", fg = p.green.base })
	hl(0, "St_TerminalmodeText", { bg = p.black.muted_darker, bold = true, fg = p.green.base })
	hl(0, "St_VisualMode", { bg = "NONE", bold = true, fg = p.blue.base })
	hl(0, "St_VisualModeCustomTxt", { bg = p.blue.base, bold = true, fg = p.black.base })
	hl(0, "St_VisualModeSep", { bg = "NONE", bold = true, fg = p.blue.base })
	hl(0, "St_VisualMode_Root_Sep", { bg = p.black.darker, fg = p.blue.base })
	hl(0, "St_VisualmodeText", { bg = p.black.muted_darker, bold = true, fg = p.blue.base })
	hl(0, "St_cwd_bg", { bg = p.yellow.intense, fg = p.black.base })
	hl(0, "St_cwd_sep", { bg = "NONE", fg = p.yellow.base })
	hl(0, "St_cwd_txt", { bg = p.black.muted_darker, fg = p.yellow.intense })
	hl(0, "St_file_bg", { bg = p.red.intense, fg = p.black.base })
	hl(0, "St_file_info", { fg = p.red.intense })
	hl(0, "St_file_sep", { bg = "NONE", fg = p.red.intense })
	hl(0, "St_file_txt", { bg = p.black.muted_darker, fg = p.red.intense })
	hl(0, "St_gitIcons", { bold = true, fg = p.black.muted_base })
	hl(0, "St_lspError", { fg = p.red.intense })
	hl(0, "St_lspWarning", { fg = p.yellow.intense })
	hl(0, "St_lspHints", { fg = p.purple.base, force = true })
	hl(0, "St_lsp_bg", { bg = p.green.base, fg = p.black.base })
	hl(0, "St_lsp_sep", { bg = "NONE", fg = p.green.base })
	hl(0, "St_lsp_txt", { bg = p.black.muted_darker, fg = p.green.base })
	hl(0, "St_sep_r", { fg = p.black.muted_darker })
	hl(0, "St_macro_sep", { fg = p.black.muted_darker, bg = "none" })
	hl(0, "St_macro_reg", { bg = p.black.muted_darker, fg = p.red.intense })
	hl(0, "St_AI_Disabled", { bg = "none", fg = p.black.muted_dark, bold = true, force = true })
	hl(0, "St_AI_Cmp_Enabled", { bg = "none", fg = p.cyan.base, bold = true, force = true })
	hl(0, "St_AI_Chat_Enabled", { bg = "none", fg = p.purple.base, bold = true, force = true })

	-- colorize gitignore to my liking because default theme does shit
	hl(0, "@string.special.path.gitignore", { link = "Normal", force = true })
	hl(0, "@punctuation.delimiter.gitignore", { link = "Added", force = true })
	hl(0, "@punctuation.bracket.gitignore", { link = "Added", force = true })
	hl(0, "@punctuation.special.gitignore", { link = "ErrorMsg", bold = true, force = true })
	hl(0, "@constant.gitignore", { link = "Function", force = true })
	hl(0, "@operator.gitignore", { link = "Function", force = true })
	hl(0, "@character.special.gitignore", { link = "Keyword", force = true })
	-- Improvements to linenr column
	hl(0, "InvisibleTxt", { fg = p.black.base, bg = "NONE" })
	hl(0, "InvisibleBg", { bg = "NONE" })
	hl(0, "MyLineNrAbove", { fg = p.red.muted, bg = "NONE", force = true })
	hl(0, "MyLineNrBelow", { fg = p.blue.muted, bg = "NONE", force = true })
	hl(0, "LineNrAbove", { link = "MyLineNrAbove", force = true })
	hl(0, "LineNrBelow", { link = "MyLineNrBelow", force = true })
	-- recolor WinSeparator
	hl(0, "WinSeparator", { fg = p.cyan.base, bg = "none", force = true })
	-- blink
	hl(0, "BlinkCmpMenu", { bg = p.black.dark, force = true })
	hl(0, "BlinkCmpMenuBorder", { link = "FloatBorder", force = true })
	hl(0, "BlinkCmpDoc", { bg = p.black.dark, force = true })
	hl(0, "BlinkCmpGhostText", { fg = p.black.dark, force = true })
	hl(0, "BlinkCmpDocBorder", { fg = p.cyan.base, bg = p.black.dark, force = true })
	hl(0, "Folded", { fg = p.cyan.muted, bg = p.black.base, force = true })

	hl(0, "LspDiagnosticsVirtualTextError", { fg = p.red.base, bg = p.red.tinted_bg, force = true })
	hl(0, "DiagnosticVirtualTextError", { fg = p.red.base, bg = p.red.tinted_bg, force = true })
	hl(0, "LspDiagnosticsVirtualTextWarning", { fg = p.yellow.intense, bg = p.yellow.tinted_bg, force = true })
	hl(0, "DiagnosticVirtualTextWarning", { fg = p.yellow.intense, bg = p.yellow.tinted_bg, force = true })
	hl(0, "DiagnosticVirtualTextWarn", { fg = p.yellow.intense, bg = p.yellow.tinted_bg, force = true })
	hl(0, "LspDiagnosticsVirtualTextInformation", { fg = p.green.base, bg = p.green.tinted_bg, force = true })
	hl(0, "DiagnosticVirtualTextInformation", { fg = p.green.base, bg = p.green.tinted_bg, force = true })
	hl(0, "LspDiagnosticsVirtualTextInfo", { fg = p.green.base, bg = p.green.tinted_bg, force = true })
	hl(0, "DiagnosticVirtualTextInfo", { fg = p.green.base, bg = p.green.tinted_bg, force = true })
	hl(0, "LspDiagnosticsVirtualTextHint", { fg = p.purple.base, bg = p.purple.tinted_bg, force = true })
	hl(0, "DiagnosticVirtualTextHint", { fg = p.purple.base, bg = p.purple.tinted_bg, force = true })
	--
	-- mini indentscope
	hl(0, "MiniIndentscopeSymbol", { fg = p.purple.muted, bg = "NONE", sp = "NONE" })
	--
	-- fzflua
	hl(0, "FzfLuaNormal", { fg = p.white.base, bg = p.black.darker, force = true })
	hl(0, "FzfLuaBorder", { fg = p.black.lighter, bg = p.black.darker, force = true })
	hl(0, "FzfLuaTitle", { fg = p.purple.base, bg = p.black.darker, force = true })
	hl(0, "FzfLuaBackdrop", { bg = p.black.darker, force = true })
	hl(0, "FzfLuaPreviewBorder", { link = "FzfLuaBorder", force = true })
	hl(0, "FzfLuaPreviewNormal", { bg = p.black.darker, force = true })
	hl(0, "FzfLuaCursorLine", { link = "CursorLine", force = true })
	hl(0, "FzfLuaLivePrompt", { fg = p.purple.delimiter, bg = "none" })
	hl(0, "FzfLuaFzfCursorLine", { link = "CursorLine", force = true })
	hl(0, "FzfLuaFzfBorder", { link = "FzfLuaBorder", force = true })
	hl(0, "FzfLuaFzfScrollbar", { link = "FzfLuaBorder", force = true })
	hl(0, "FzfLuaFzfSeparator", { link = "FzfLuaBorder", force = true })
	hl(0, "FzfLuaFzfHeader", { fg = p.purple.base, bg = p.black.darker, force = true })
	hl(0, "FzfLuaFzfInfo", { fg = p.purple.base, bg = p.black.darker, force = true })
	hl(0, "FzfLuaFzfPointer", { fg = p.purple.delimiter, bg = "none" })
	hl(0, "FzfLuaFzfPrompt", { fg = p.purple.delimiter, bg = "none" })
	-- hl(0, "FzfLuaTitleFlags", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaCursorLineNr", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaSearch", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaScrollBorderEmpty", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaScrollBorderFull", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaScrollFloatEmpty", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaScrollFloatFull", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaHelpBorder", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaHeaderBind", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaHeaderText", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaPathColNr", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaPathLineNr", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaBufName", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaBufId", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaBufNr", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaBufLineNr", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaBufFlagCur", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaBufFlagAlt", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaTabTitle", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaTabMarker", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaDirIcon", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaDirPart", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaFilePart", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaLiveSym", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaFzfMatch", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaFzfGutter", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaFzfMarker", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaFzfSpinner", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
	-- hl(0, "FzfLuaFzfQuery", { fg = p.base[ "05" ], bg = p.base[ "00" ] })
end

return THEME
